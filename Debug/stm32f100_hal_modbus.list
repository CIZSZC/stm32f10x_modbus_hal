
stm32f100_hal_modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a84  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c0  080051c0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080051c0  080051c0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051c0  080051c0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080051c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200000fc  080052c4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080052c4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126fb  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003183  00000000  00000000  00032820  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  000359a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000104c3  00000000  00000000  000375d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d516  00000000  00000000  00047a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054d07  00000000  00000000  00054fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9cb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a4  00000000  00000000  000a9d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c3c 	.word	0x08004c3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08004c3c 	.word	0x08004c3c

08000210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000214:	2003      	movs	r0, #3
 8000216:	f000 f921 	bl	800045c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f003 fb38 	bl	8003894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000224:	2300      	movs	r3, #0
}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_InitTick+0x54>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <HAL_InitTick+0x58>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4619      	mov	r1, r3
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	fbb3 f3f1 	udiv	r3, r3, r1
 8000246:	fbb2 f3f3 	udiv	r3, r2, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f93b 	bl	80004c6 <HAL_SYSTICK_Config>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	e00e      	b.n	8000278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d80a      	bhi.n	8000276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000260:	2200      	movs	r2, #0
 8000262:	6879      	ldr	r1, [r7, #4]
 8000264:	f04f 30ff 	mov.w	r0, #4294967295
 8000268:	f000 f903 	bl	8000472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_InitTick+0x5c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000272:	2300      	movs	r3, #0
 8000274:	e000      	b.n	8000278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000094 	.word	0x20000094
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <HAL_IncTick+0x1c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <HAL_IncTick+0x20>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4413      	add	r3, r2
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <HAL_IncTick+0x20>)
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	20000004 	.word	0x20000004
 80002ac:	2000019c 	.word	0x2000019c

080002b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return uwTick;
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <HAL_GetTick+0x10>)
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	2000019c 	.word	0x2000019c

080002c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f003 0307 	and.w	r3, r3, #7
 80002d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <__NVIC_SetPriorityGrouping+0x44>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002e0:	4013      	ands	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002f6:	4a04      	ldr	r2, [pc, #16]	; (8000308 <__NVIC_SetPriorityGrouping+0x44>)
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	60d3      	str	r3, [r2, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <__NVIC_GetPriorityGrouping+0x18>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	f003 0307 	and.w	r3, r3, #7
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	2b00      	cmp	r3, #0
 8000338:	db0b      	blt.n	8000352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 021f 	and.w	r2, r3, #31
 8000340:	4906      	ldr	r1, [pc, #24]	; (800035c <__NVIC_EnableIRQ+0x34>)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	095b      	lsrs	r3, r3, #5
 8000348:	2001      	movs	r0, #1
 800034a:	fa00 f202 	lsl.w	r2, r0, r2
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	e000e100 	.word	0xe000e100

08000360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	6039      	str	r1, [r7, #0]
 800036a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000370:	2b00      	cmp	r3, #0
 8000372:	db0a      	blt.n	800038a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	490c      	ldr	r1, [pc, #48]	; (80003ac <__NVIC_SetPriority+0x4c>)
 800037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037e:	0112      	lsls	r2, r2, #4
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	440b      	add	r3, r1
 8000384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000388:	e00a      	b.n	80003a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4908      	ldr	r1, [pc, #32]	; (80003b0 <__NVIC_SetPriority+0x50>)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	f003 030f 	and.w	r3, r3, #15
 8000396:	3b04      	subs	r3, #4
 8000398:	0112      	lsls	r2, r2, #4
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	440b      	add	r3, r1
 800039e:	761a      	strb	r2, [r3, #24]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000e100 	.word	0xe000e100
 80003b0:	e000ed00 	.word	0xe000ed00

080003b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b089      	sub	sp, #36	; 0x24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f003 0307 	and.w	r3, r3, #7
 80003c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	f1c3 0307 	rsb	r3, r3, #7
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	bf28      	it	cs
 80003d2:	2304      	movcs	r3, #4
 80003d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	3304      	adds	r3, #4
 80003da:	2b06      	cmp	r3, #6
 80003dc:	d902      	bls.n	80003e4 <NVIC_EncodePriority+0x30>
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	3b03      	subs	r3, #3
 80003e2:	e000      	b.n	80003e6 <NVIC_EncodePriority+0x32>
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ec:	69bb      	ldr	r3, [r7, #24]
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	43da      	mvns	r2, r3
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	401a      	ands	r2, r3
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43d9      	mvns	r1, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	4313      	orrs	r3, r2
         );
}
 800040e:	4618      	mov	r0, r3
 8000410:	3724      	adds	r7, #36	; 0x24
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3b01      	subs	r3, #1
 8000424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000428:	d301      	bcc.n	800042e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800042a:	2301      	movs	r3, #1
 800042c:	e00f      	b.n	800044e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <SysTick_Config+0x40>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3b01      	subs	r3, #1
 8000434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000436:	210f      	movs	r1, #15
 8000438:	f04f 30ff 	mov.w	r0, #4294967295
 800043c:	f7ff ff90 	bl	8000360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <SysTick_Config+0x40>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <SysTick_Config+0x40>)
 8000448:	2207      	movs	r2, #7
 800044a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	e000e010 	.word	0xe000e010

0800045c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff ff2d 	bl	80002c4 <__NVIC_SetPriorityGrouping>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af00      	add	r7, sp, #0
 8000478:	4603      	mov	r3, r0
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
 800047e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000484:	f7ff ff42 	bl	800030c <__NVIC_GetPriorityGrouping>
 8000488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	68b9      	ldr	r1, [r7, #8]
 800048e:	6978      	ldr	r0, [r7, #20]
 8000490:	f7ff ff90 	bl	80003b4 <NVIC_EncodePriority>
 8000494:	4602      	mov	r2, r0
 8000496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800049a:	4611      	mov	r1, r2
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff5f 	bl	8000360 <__NVIC_SetPriority>
}
 80004a2:	bf00      	nop
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff35 	bl	8000328 <__NVIC_EnableIRQ>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff ffa2 	bl	8000418 <SysTick_Config>
 80004d4:	4603      	mov	r3, r0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b08b      	sub	sp, #44	; 0x2c
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004ea:	2300      	movs	r3, #0
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004ee:	2300      	movs	r3, #0
 80004f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f2:	e127      	b.n	8000744 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004f4:	2201      	movs	r2, #1
 80004f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	4013      	ands	r3, r2
 8000506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000508:	69ba      	ldr	r2, [r7, #24]
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	429a      	cmp	r2, r3
 800050e:	f040 8116 	bne.w	800073e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	2b12      	cmp	r3, #18
 8000518:	d034      	beq.n	8000584 <HAL_GPIO_Init+0xa4>
 800051a:	2b12      	cmp	r3, #18
 800051c:	d80d      	bhi.n	800053a <HAL_GPIO_Init+0x5a>
 800051e:	2b02      	cmp	r3, #2
 8000520:	d02b      	beq.n	800057a <HAL_GPIO_Init+0x9a>
 8000522:	2b02      	cmp	r3, #2
 8000524:	d804      	bhi.n	8000530 <HAL_GPIO_Init+0x50>
 8000526:	2b00      	cmp	r3, #0
 8000528:	d031      	beq.n	800058e <HAL_GPIO_Init+0xae>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d01c      	beq.n	8000568 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800052e:	e048      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000530:	2b03      	cmp	r3, #3
 8000532:	d043      	beq.n	80005bc <HAL_GPIO_Init+0xdc>
 8000534:	2b11      	cmp	r3, #17
 8000536:	d01b      	beq.n	8000570 <HAL_GPIO_Init+0x90>
          break;
 8000538:	e043      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800053a:	4a89      	ldr	r2, [pc, #548]	; (8000760 <HAL_GPIO_Init+0x280>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d026      	beq.n	800058e <HAL_GPIO_Init+0xae>
 8000540:	4a87      	ldr	r2, [pc, #540]	; (8000760 <HAL_GPIO_Init+0x280>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d806      	bhi.n	8000554 <HAL_GPIO_Init+0x74>
 8000546:	4a87      	ldr	r2, [pc, #540]	; (8000764 <HAL_GPIO_Init+0x284>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d020      	beq.n	800058e <HAL_GPIO_Init+0xae>
 800054c:	4a86      	ldr	r2, [pc, #536]	; (8000768 <HAL_GPIO_Init+0x288>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d01d      	beq.n	800058e <HAL_GPIO_Init+0xae>
          break;
 8000552:	e036      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000554:	4a85      	ldr	r2, [pc, #532]	; (800076c <HAL_GPIO_Init+0x28c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d019      	beq.n	800058e <HAL_GPIO_Init+0xae>
 800055a:	4a85      	ldr	r2, [pc, #532]	; (8000770 <HAL_GPIO_Init+0x290>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d016      	beq.n	800058e <HAL_GPIO_Init+0xae>
 8000560:	4a84      	ldr	r2, [pc, #528]	; (8000774 <HAL_GPIO_Init+0x294>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d013      	beq.n	800058e <HAL_GPIO_Init+0xae>
          break;
 8000566:	e02c      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	623b      	str	r3, [r7, #32]
          break;
 800056e:	e028      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	3304      	adds	r3, #4
 8000576:	623b      	str	r3, [r7, #32]
          break;
 8000578:	e023      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	3308      	adds	r3, #8
 8000580:	623b      	str	r3, [r7, #32]
          break;
 8000582:	e01e      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	330c      	adds	r3, #12
 800058a:	623b      	str	r3, [r7, #32]
          break;
 800058c:	e019      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d102      	bne.n	800059c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000596:	2304      	movs	r3, #4
 8000598:	623b      	str	r3, [r7, #32]
          break;
 800059a:	e012      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d105      	bne.n	80005b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005a4:	2308      	movs	r3, #8
 80005a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	69fa      	ldr	r2, [r7, #28]
 80005ac:	611a      	str	r2, [r3, #16]
          break;
 80005ae:	e008      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005b0:	2308      	movs	r3, #8
 80005b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	69fa      	ldr	r2, [r7, #28]
 80005b8:	615a      	str	r2, [r3, #20]
          break;
 80005ba:	e002      	b.n	80005c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
          break;
 80005c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d801      	bhi.n	80005cc <HAL_GPIO_Init+0xec>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	e001      	b.n	80005d0 <HAL_GPIO_Init+0xf0>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3304      	adds	r3, #4
 80005d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2bff      	cmp	r3, #255	; 0xff
 80005d6:	d802      	bhi.n	80005de <HAL_GPIO_Init+0xfe>
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	e002      	b.n	80005e4 <HAL_GPIO_Init+0x104>
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	3b08      	subs	r3, #8
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	210f      	movs	r1, #15
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	401a      	ands	r2, r3
 80005f6:	6a39      	ldr	r1, [r7, #32]
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	431a      	orrs	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	2b00      	cmp	r3, #0
 800060e:	f000 8096 	beq.w	800073e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	4b59      	ldr	r3, [pc, #356]	; (8000778 <HAL_GPIO_Init+0x298>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a58      	ldr	r2, [pc, #352]	; (8000778 <HAL_GPIO_Init+0x298>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b56      	ldr	r3, [pc, #344]	; (8000778 <HAL_GPIO_Init+0x298>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800062a:	4a54      	ldr	r2, [pc, #336]	; (800077c <HAL_GPIO_Init+0x29c>)
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	3302      	adds	r3, #2
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	220f      	movs	r2, #15
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a4b      	ldr	r2, [pc, #300]	; (8000780 <HAL_GPIO_Init+0x2a0>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d013      	beq.n	800067e <HAL_GPIO_Init+0x19e>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a4a      	ldr	r2, [pc, #296]	; (8000784 <HAL_GPIO_Init+0x2a4>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d00d      	beq.n	800067a <HAL_GPIO_Init+0x19a>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a49      	ldr	r2, [pc, #292]	; (8000788 <HAL_GPIO_Init+0x2a8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d007      	beq.n	8000676 <HAL_GPIO_Init+0x196>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a48      	ldr	r2, [pc, #288]	; (800078c <HAL_GPIO_Init+0x2ac>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <HAL_GPIO_Init+0x192>
 800066e:	2303      	movs	r3, #3
 8000670:	e006      	b.n	8000680 <HAL_GPIO_Init+0x1a0>
 8000672:	2304      	movs	r3, #4
 8000674:	e004      	b.n	8000680 <HAL_GPIO_Init+0x1a0>
 8000676:	2302      	movs	r3, #2
 8000678:	e002      	b.n	8000680 <HAL_GPIO_Init+0x1a0>
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <HAL_GPIO_Init+0x1a0>
 800067e:	2300      	movs	r3, #0
 8000680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000682:	f002 0203 	and.w	r2, r2, #3
 8000686:	0092      	lsls	r2, r2, #2
 8000688:	4093      	lsls	r3, r2
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	4313      	orrs	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000690:	493a      	ldr	r1, [pc, #232]	; (800077c <HAL_GPIO_Init+0x29c>)
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	3302      	adds	r3, #2
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4938      	ldr	r1, [pc, #224]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	600b      	str	r3, [r1, #0]
 80006b6:	e006      	b.n	80006c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	43db      	mvns	r3, r3
 80006c0:	4933      	ldr	r1, [pc, #204]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006c2:	4013      	ands	r3, r2
 80006c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	492e      	ldr	r1, [pc, #184]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	4313      	orrs	r3, r2
 80006dc:	604b      	str	r3, [r1, #4]
 80006de:	e006      	b.n	80006ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4929      	ldr	r1, [pc, #164]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	4924      	ldr	r1, [pc, #144]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	4313      	orrs	r3, r2
 8000704:	608b      	str	r3, [r1, #8]
 8000706:	e006      	b.n	8000716 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	43db      	mvns	r3, r3
 8000710:	491f      	ldr	r1, [pc, #124]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 8000712:	4013      	ands	r3, r2
 8000714:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 8000724:	68da      	ldr	r2, [r3, #12]
 8000726:	491a      	ldr	r1, [pc, #104]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	4313      	orrs	r3, r2
 800072c:	60cb      	str	r3, [r1, #12]
 800072e:	e006      	b.n	800073e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	43db      	mvns	r3, r3
 8000738:	4915      	ldr	r1, [pc, #84]	; (8000790 <HAL_GPIO_Init+0x2b0>)
 800073a:	4013      	ands	r3, r2
 800073c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	3301      	adds	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	fa22 f303 	lsr.w	r3, r2, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	f47f aed0 	bne.w	80004f4 <HAL_GPIO_Init+0x14>
  }
}
 8000754:	bf00      	nop
 8000756:	372c      	adds	r7, #44	; 0x2c
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	10210000 	.word	0x10210000
 8000764:	10110000 	.word	0x10110000
 8000768:	10120000 	.word	0x10120000
 800076c:	10310000 	.word	0x10310000
 8000770:	10320000 	.word	0x10320000
 8000774:	10220000 	.word	0x10220000
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	40010800 	.word	0x40010800
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40011000 	.word	0x40011000
 800078c:	40011400 	.word	0x40011400
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e26c      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 8087 	beq.w	80008c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007b4:	4b92      	ldr	r3, [pc, #584]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d00c      	beq.n	80007da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007c0:	4b8f      	ldr	r3, [pc, #572]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f003 030c 	and.w	r3, r3, #12
 80007c8:	2b08      	cmp	r3, #8
 80007ca:	d112      	bne.n	80007f2 <HAL_RCC_OscConfig+0x5e>
 80007cc:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007d8:	d10b      	bne.n	80007f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007da:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d06c      	beq.n	80008c0 <HAL_RCC_OscConfig+0x12c>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d168      	bne.n	80008c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e246      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007fa:	d106      	bne.n	800080a <HAL_RCC_OscConfig+0x76>
 80007fc:	4b80      	ldr	r3, [pc, #512]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a7f      	ldr	r2, [pc, #508]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	e02e      	b.n	8000868 <HAL_RCC_OscConfig+0xd4>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10c      	bne.n	800082c <HAL_RCC_OscConfig+0x98>
 8000812:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a7a      	ldr	r2, [pc, #488]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	4b78      	ldr	r3, [pc, #480]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a77      	ldr	r2, [pc, #476]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e01d      	b.n	8000868 <HAL_RCC_OscConfig+0xd4>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000834:	d10c      	bne.n	8000850 <HAL_RCC_OscConfig+0xbc>
 8000836:	4b72      	ldr	r3, [pc, #456]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a71      	ldr	r2, [pc, #452]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	4b6f      	ldr	r3, [pc, #444]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a6e      	ldr	r2, [pc, #440]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	e00b      	b.n	8000868 <HAL_RCC_OscConfig+0xd4>
 8000850:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a6a      	ldr	r2, [pc, #424]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a67      	ldr	r2, [pc, #412]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d013      	beq.n	8000898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000870:	f7ff fd1e 	bl	80002b0 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000876:	e008      	b.n	800088a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000878:	f7ff fd1a 	bl	80002b0 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	2b64      	cmp	r3, #100	; 0x64
 8000884:	d901      	bls.n	800088a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000886:	2303      	movs	r3, #3
 8000888:	e1fa      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f0      	beq.n	8000878 <HAL_RCC_OscConfig+0xe4>
 8000896:	e014      	b.n	80008c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000898:	f7ff fd0a 	bl	80002b0 <HAL_GetTick>
 800089c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800089e:	e008      	b.n	80008b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008a0:	f7ff fd06 	bl	80002b0 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	2b64      	cmp	r3, #100	; 0x64
 80008ac:	d901      	bls.n	80008b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008ae:	2303      	movs	r3, #3
 80008b0:	e1e6      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f0      	bne.n	80008a0 <HAL_RCC_OscConfig+0x10c>
 80008be:	e000      	b.n	80008c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d063      	beq.n	8000996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 030c 	and.w	r3, r3, #12
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00b      	beq.n	80008f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 030c 	and.w	r3, r3, #12
 80008e2:	2b08      	cmp	r3, #8
 80008e4:	d11c      	bne.n	8000920 <HAL_RCC_OscConfig+0x18c>
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d116      	bne.n	8000920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <HAL_RCC_OscConfig+0x176>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d001      	beq.n	800090a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e1ba      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090a:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	4939      	ldr	r1, [pc, #228]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800091a:	4313      	orrs	r3, r2
 800091c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800091e:	e03a      	b.n	8000996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d020      	beq.n	800096a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_RCC_OscConfig+0x270>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092e:	f7ff fcbf 	bl	80002b0 <HAL_GetTick>
 8000932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000934:	e008      	b.n	8000948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000936:	f7ff fcbb 	bl	80002b0 <HAL_GetTick>
 800093a:	4602      	mov	r2, r0
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d901      	bls.n	8000948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000944:	2303      	movs	r3, #3
 8000946:	e19b      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f0      	beq.n	8000936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	4927      	ldr	r1, [pc, #156]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 8000964:	4313      	orrs	r3, r2
 8000966:	600b      	str	r3, [r1, #0]
 8000968:	e015      	b.n	8000996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <HAL_RCC_OscConfig+0x270>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fc9e 	bl	80002b0 <HAL_GetTick>
 8000974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000976:	e008      	b.n	800098a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000978:	f7ff fc9a 	bl	80002b0 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d901      	bls.n	800098a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e17a      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1f0      	bne.n	8000978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d03a      	beq.n	8000a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d019      	beq.n	80009de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_RCC_OscConfig+0x274>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009b0:	f7ff fc7e 	bl	80002b0 <HAL_GetTick>
 80009b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b6:	e008      	b.n	80009ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009b8:	f7ff fc7a 	bl	80002b0 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d901      	bls.n	80009ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009c6:	2303      	movs	r3, #3
 80009c8:	e15a      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_RCC_OscConfig+0x26c>)
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f0      	beq.n	80009b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 faaa 	bl	8000f30 <RCC_Delay>
 80009dc:	e01c      	b.n	8000a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_RCC_OscConfig+0x274>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009e4:	f7ff fc64 	bl	80002b0 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ea:	e00f      	b.n	8000a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ec:	f7ff fc60 	bl	80002b0 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d908      	bls.n	8000a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e140      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	42420000 	.word	0x42420000
 8000a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0c:	4b9e      	ldr	r3, [pc, #632]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1e9      	bne.n	80009ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 80a6 	beq.w	8000b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2a:	4b97      	ldr	r3, [pc, #604]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10d      	bne.n	8000a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b94      	ldr	r3, [pc, #592]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a93      	ldr	r2, [pc, #588]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b91      	ldr	r3, [pc, #580]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a52:	4b8e      	ldr	r3, [pc, #568]	; (8000c8c <HAL_RCC_OscConfig+0x4f8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d118      	bne.n	8000a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a5e:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <HAL_RCC_OscConfig+0x4f8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a8a      	ldr	r2, [pc, #552]	; (8000c8c <HAL_RCC_OscConfig+0x4f8>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a6a:	f7ff fc21 	bl	80002b0 <HAL_GetTick>
 8000a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a70:	e008      	b.n	8000a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a72:	f7ff fc1d 	bl	80002b0 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b64      	cmp	r3, #100	; 0x64
 8000a7e:	d901      	bls.n	8000a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e0fd      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	4b81      	ldr	r3, [pc, #516]	; (8000c8c <HAL_RCC_OscConfig+0x4f8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f0      	beq.n	8000a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x312>
 8000a98:	4b7b      	ldr	r3, [pc, #492]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	4a7a      	ldr	r2, [pc, #488]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6213      	str	r3, [r2, #32]
 8000aa4:	e02d      	b.n	8000b02 <HAL_RCC_OscConfig+0x36e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10c      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x334>
 8000aae:	4b76      	ldr	r3, [pc, #472]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a75      	ldr	r2, [pc, #468]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6213      	str	r3, [r2, #32]
 8000aba:	4b73      	ldr	r3, [pc, #460]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a72      	ldr	r2, [pc, #456]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
 8000ac4:	6213      	str	r3, [r2, #32]
 8000ac6:	e01c      	b.n	8000b02 <HAL_RCC_OscConfig+0x36e>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d10c      	bne.n	8000aea <HAL_RCC_OscConfig+0x356>
 8000ad0:	4b6d      	ldr	r3, [pc, #436]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a6c      	ldr	r2, [pc, #432]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6213      	str	r3, [r2, #32]
 8000adc:	4b6a      	ldr	r3, [pc, #424]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	4a69      	ldr	r2, [pc, #420]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6213      	str	r3, [r2, #32]
 8000ae8:	e00b      	b.n	8000b02 <HAL_RCC_OscConfig+0x36e>
 8000aea:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	4a66      	ldr	r2, [pc, #408]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	f023 0301 	bic.w	r3, r3, #1
 8000af4:	6213      	str	r3, [r2, #32]
 8000af6:	4b64      	ldr	r3, [pc, #400]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	4a63      	ldr	r2, [pc, #396]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000afc:	f023 0304 	bic.w	r3, r3, #4
 8000b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d015      	beq.n	8000b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fbd1 	bl	80002b0 <HAL_GetTick>
 8000b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b10:	e00a      	b.n	8000b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b12:	f7ff fbcd 	bl	80002b0 <HAL_GetTick>
 8000b16:	4602      	mov	r2, r0
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d901      	bls.n	8000b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e0ab      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b28:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0ee      	beq.n	8000b12 <HAL_RCC_OscConfig+0x37e>
 8000b34:	e014      	b.n	8000b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b36:	f7ff fbbb 	bl	80002b0 <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b3c:	e00a      	b.n	8000b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fbb7 	bl	80002b0 <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d901      	bls.n	8000b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b50:	2303      	movs	r3, #3
 8000b52:	e095      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ee      	bne.n	8000b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d105      	bne.n	8000b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a47      	ldr	r2, [pc, #284]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8081 	beq.w	8000c7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d061      	beq.n	8000c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d146      	bne.n	8000c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <HAL_RCC_OscConfig+0x4fc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b96:	f7ff fb8b 	bl	80002b0 <HAL_GetTick>
 8000b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b9c:	e008      	b.n	8000bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b9e:	f7ff fb87 	bl	80002b0 <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e067      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f0      	bne.n	8000b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc4:	d108      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bca:	f023 020f 	bic.w	r2, r3, #15
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	492d      	ldr	r1, [pc, #180]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a19      	ldr	r1, [r3, #32]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	430b      	orrs	r3, r1
 8000bea:	4927      	ldr	r1, [pc, #156]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_RCC_OscConfig+0x4fc>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fb5b 	bl	80002b0 <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bfc:	e008      	b.n	8000c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bfe:	f7ff fb57 	bl	80002b0 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d901      	bls.n	8000c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e037      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f0      	beq.n	8000bfe <HAL_RCC_OscConfig+0x46a>
 8000c1c:	e02f      	b.n	8000c7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_RCC_OscConfig+0x4fc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c24:	f7ff fb44 	bl	80002b0 <HAL_GetTick>
 8000c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c2c:	f7ff fb40 	bl	80002b0 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e020      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f0      	bne.n	8000c2c <HAL_RCC_OscConfig+0x498>
 8000c4a:	e018      	b.n	8000c7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e013      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_RCC_OscConfig+0x4f4>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d106      	bne.n	8000c7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d001      	beq.n	8000c7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	42420060 	.word	0x42420060

08000c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e0a0      	b.n	8000dea <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d020      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cc0:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce4:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	4940      	ldr	r1, [pc, #256]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d040      	beq.n	8000d84 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d107      	bne.n	8000d1a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d115      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e067      	b.n	8000dea <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d107      	bne.n	8000d32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e05b      	b.n	8000dea <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e053      	b.n	8000dea <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 0203 	bic.w	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4929      	ldr	r1, [pc, #164]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d54:	f7ff faac 	bl	80002b0 <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5a:	e00a      	b.n	8000d72 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff faa8 	bl	80002b0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e03b      	b.n	8000dea <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 020c 	and.w	r2, r3, #12
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d1eb      	bne.n	8000d5c <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4915      	ldr	r1, [pc, #84]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d009      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	490d      	ldr	r1, [pc, #52]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dc2:	f000 f81f 	bl	8000e04 <HAL_RCC_GetSysClockFreq>
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_RCC_ClockConfig+0x164>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_RCC_ClockConfig+0x168>)
 8000ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_RCC_ClockConfig+0x16c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa22 	bl	800022c <HAL_InitTick>

  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	080050d4 	.word	0x080050d4
 8000dfc:	20000094 	.word	0x20000094
 8000e00:	20000000 	.word	0x20000000

08000e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e04:	b490      	push	{r4, r7}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e0c:	f107 0414 	add.w	r4, r7, #20
 8000e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e18:	1d3c      	adds	r4, r7, #4
 8000e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d002      	beq.n	8000e4a <HAL_RCC_GetSysClockFreq+0x46>
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d003      	beq.n	8000e50 <HAL_RCC_GetSysClockFreq+0x4c>
 8000e48:	e02c      	b.n	8000ea4 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000e4e:	e02c      	b.n	8000eaa <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e5c:	4413      	add	r3, r2
 8000e5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d012      	beq.n	8000e94 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e86:	fb02 f203 	mul.w	r2, r2, r3
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
 8000e92:	e004      	b.n	8000e9e <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ea2:	e002      	b.n	8000eaa <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc90      	pop	{r4, r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	08004c54 	.word	0x08004c54
 8000ebc:	08004c64 	.word	0x08004c64
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	007a1200 	.word	0x007a1200
 8000ec8:	003d0900 	.word	0x003d0900

08000ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <HAL_RCC_GetHCLKFreq+0x10>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	20000094 	.word	0x20000094

08000ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ee4:	f7ff fff2 	bl	8000ecc <HAL_RCC_GetHCLKFreq>
 8000ee8:	4601      	mov	r1, r0
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	080050e4 	.word	0x080050e4

08000f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_RCC_GetHCLKFreq>
 8000f10:	4601      	mov	r1, r0
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	0adb      	lsrs	r3, r3, #11
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	080050e4 	.word	0x080050e4

08000f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <RCC_Delay+0x34>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <RCC_Delay+0x38>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f4c:	bf00      	nop
  }
  while (Delay --);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	60fa      	str	r2, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f9      	bne.n	8000f4c <RCC_Delay+0x1c>
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000094 	.word	0x20000094
 8000f68:	10624dd3 	.word	0x10624dd3

08000f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e01d      	b.n	8000fba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f002 fcb0 	bl	80038f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f000 f982 	bl	80012b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b06      	cmp	r3, #6
 8000fea:	d007      	beq.n	8000ffc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	f241 1311 	movw	r3, #4369	; 0x1111
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10f      	bne.n	8001050 <HAL_TIM_Base_Stop_IT+0x48>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	f240 4344 	movw	r3, #1092	; 0x444
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <HAL_TIM_Base_Stop_IT+0x48>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b02      	cmp	r3, #2
 8001070:	d122      	bne.n	80010b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b02      	cmp	r3, #2
 800107e:	d11b      	bne.n	80010b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f06f 0202 	mvn.w	r2, #2
 8001088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f8ed 	bl	800127e <HAL_TIM_IC_CaptureCallback>
 80010a4:	e005      	b.n	80010b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f8e0 	bl	800126c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f8ef 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d122      	bne.n	800110c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d11b      	bne.n	800110c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f06f 0204 	mvn.w	r2, #4
 80010dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2202      	movs	r2, #2
 80010e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f8c3 	bl	800127e <HAL_TIM_IC_CaptureCallback>
 80010f8:	e005      	b.n	8001106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f8b6 	bl	800126c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f8c5 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b08      	cmp	r3, #8
 8001118:	d122      	bne.n	8001160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b08      	cmp	r3, #8
 8001126:	d11b      	bne.n	8001160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f06f 0208 	mvn.w	r2, #8
 8001130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2204      	movs	r2, #4
 8001136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f899 	bl	800127e <HAL_TIM_IC_CaptureCallback>
 800114c:	e005      	b.n	800115a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f88c 	bl	800126c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f89b 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	2b10      	cmp	r3, #16
 800116c:	d122      	bne.n	80011b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b10      	cmp	r3, #16
 800117a:	d11b      	bne.n	80011b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f06f 0210 	mvn.w	r2, #16
 8001184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2208      	movs	r2, #8
 800118a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f86f 	bl	800127e <HAL_TIM_IC_CaptureCallback>
 80011a0:	e005      	b.n	80011ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f862 	bl	800126c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f871 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d10e      	bne.n	80011e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d107      	bne.n	80011e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 0201 	mvn.w	r2, #1
 80011d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f001 ff00 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b80      	cmp	r3, #128	; 0x80
 80011ec:	d10e      	bne.n	800120c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f8:	2b80      	cmp	r3, #128	; 0x80
 80011fa:	d107      	bne.n	800120c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f921 	bl	800144e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001216:	2b40      	cmp	r3, #64	; 0x40
 8001218:	d10e      	bne.n	8001238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001224:	2b40      	cmp	r3, #64	; 0x40
 8001226:	d107      	bne.n	8001238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f835 	bl	80012a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	2b20      	cmp	r3, #32
 8001244:	d10e      	bne.n	8001264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	2b20      	cmp	r3, #32
 8001252:	d107      	bne.n	8001264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0220 	mvn.w	r2, #32
 800125c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f8ec 	bl	800143c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a35      	ldr	r2, [pc, #212]	; (800139c <TIM_Base_SetConfig+0xe8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00b      	beq.n	80012e4 <TIM_Base_SetConfig+0x30>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d2:	d007      	beq.n	80012e4 <TIM_Base_SetConfig+0x30>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <TIM_Base_SetConfig+0xec>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d003      	beq.n	80012e4 <TIM_Base_SetConfig+0x30>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <TIM_Base_SetConfig+0xf0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d108      	bne.n	80012f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <TIM_Base_SetConfig+0xe8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d017      	beq.n	800132e <TIM_Base_SetConfig+0x7a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d013      	beq.n	800132e <TIM_Base_SetConfig+0x7a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <TIM_Base_SetConfig+0xec>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00f      	beq.n	800132e <TIM_Base_SetConfig+0x7a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <TIM_Base_SetConfig+0xf0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00b      	beq.n	800132e <TIM_Base_SetConfig+0x7a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <TIM_Base_SetConfig+0xf4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <TIM_Base_SetConfig+0x7a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <TIM_Base_SetConfig+0xf8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d003      	beq.n	800132e <TIM_Base_SetConfig+0x7a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <TIM_Base_SetConfig+0xfc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d108      	bne.n	8001340 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a0d      	ldr	r2, [pc, #52]	; (800139c <TIM_Base_SetConfig+0xe8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d00b      	beq.n	8001384 <TIM_Base_SetConfig+0xd0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <TIM_Base_SetConfig+0xf4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d007      	beq.n	8001384 <TIM_Base_SetConfig+0xd0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <TIM_Base_SetConfig+0xf8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d003      	beq.n	8001384 <TIM_Base_SetConfig+0xd0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <TIM_Base_SetConfig+0xfc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d103      	bne.n	800138c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	615a      	str	r2, [r3, #20]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40000800 	.word	0x40000800
 80013a8:	40014000 	.word	0x40014000
 80013ac:	40014400 	.word	0x40014400
 80013b0:	40014800 	.word	0x40014800

080013b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e032      	b.n	8001432 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2202      	movs	r2, #2
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001404:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4313      	orrs	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e03f      	b.n	80014f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f002 fa5c 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f829 	bl	80014fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800153c:	f023 030c 	bic.w	r3, r3, #12
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	68f9      	ldr	r1, [r7, #12]
 8001546:	430b      	orrs	r3, r1
 8001548:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001568:	f040 80a5 	bne.w	80016b6 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4aa4      	ldr	r2, [pc, #656]	; (8001804 <UART_SetConfig+0x308>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d14f      	bne.n	8001616 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001576:	f7ff fcc7 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 800157a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009a      	lsls	r2, r3, #2
 8001586:	441a      	add	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4a9d      	ldr	r2, [pc, #628]	; (8001808 <UART_SetConfig+0x30c>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	0119      	lsls	r1, r3, #4
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009a      	lsls	r2, r3, #2
 80015a6:	441a      	add	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80015b2:	4b95      	ldr	r3, [pc, #596]	; (8001808 <UART_SetConfig+0x30c>)
 80015b4:	fba3 0302 	umull	r0, r3, r3, r2
 80015b8:	095b      	lsrs	r3, r3, #5
 80015ba:	2064      	movs	r0, #100	; 0x64
 80015bc:	fb00 f303 	mul.w	r3, r0, r3
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	3332      	adds	r3, #50	; 0x32
 80015c6:	4a90      	ldr	r2, [pc, #576]	; (8001808 <UART_SetConfig+0x30c>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015d4:	4419      	add	r1, r3
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	009a      	lsls	r2, r3, #2
 80015e0:	441a      	add	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015ec:	4b86      	ldr	r3, [pc, #536]	; (8001808 <UART_SetConfig+0x30c>)
 80015ee:	fba3 0302 	umull	r0, r3, r3, r2
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2064      	movs	r0, #100	; 0x64
 80015f6:	fb00 f303 	mul.w	r3, r0, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	3332      	adds	r3, #50	; 0x32
 8001600:	4a81      	ldr	r2, [pc, #516]	; (8001808 <UART_SetConfig+0x30c>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	f003 0207 	and.w	r2, r3, #7
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	440a      	add	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001614:	e0f1      	b.n	80017fa <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001616:	f7ff fc63 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 800161a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009a      	lsls	r2, r3, #2
 8001626:	441a      	add	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4a75      	ldr	r2, [pc, #468]	; (8001808 <UART_SetConfig+0x30c>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	0119      	lsls	r1, r3, #4
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	009a      	lsls	r2, r3, #2
 8001646:	441a      	add	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001652:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <UART_SetConfig+0x30c>)
 8001654:	fba3 0302 	umull	r0, r3, r3, r2
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	fb00 f303 	mul.w	r3, r0, r3
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	3332      	adds	r3, #50	; 0x32
 8001666:	4a68      	ldr	r2, [pc, #416]	; (8001808 <UART_SetConfig+0x30c>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001674:	4419      	add	r1, r3
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fbb2 f2f3 	udiv	r2, r2, r3
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <UART_SetConfig+0x30c>)
 800168e:	fba3 0302 	umull	r0, r3, r3, r2
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	3332      	adds	r3, #50	; 0x32
 80016a0:	4a59      	ldr	r2, [pc, #356]	; (8001808 <UART_SetConfig+0x30c>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	f003 0207 	and.w	r2, r3, #7
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	440a      	add	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	e0a1      	b.n	80017fa <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a52      	ldr	r2, [pc, #328]	; (8001804 <UART_SetConfig+0x308>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d14e      	bne.n	800175e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80016c0:	f7ff fc22 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 80016c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009a      	lsls	r2, r3, #2
 80016d0:	441a      	add	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <UART_SetConfig+0x30c>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	0119      	lsls	r1, r3, #4
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009a      	lsls	r2, r3, #2
 80016f0:	441a      	add	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <UART_SetConfig+0x30c>)
 80016fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2064      	movs	r0, #100	; 0x64
 8001706:	fb00 f303 	mul.w	r3, r0, r3
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	3332      	adds	r3, #50	; 0x32
 8001710:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <UART_SetConfig+0x30c>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171c:	4419      	add	r1, r3
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009a      	lsls	r2, r3, #2
 8001728:	441a      	add	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fbb2 f2f3 	udiv	r2, r2, r3
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <UART_SetConfig+0x30c>)
 8001736:	fba3 0302 	umull	r0, r3, r3, r2
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2064      	movs	r0, #100	; 0x64
 800173e:	fb00 f303 	mul.w	r3, r0, r3
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	3332      	adds	r3, #50	; 0x32
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <UART_SetConfig+0x30c>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	f003 020f 	and.w	r2, r3, #15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	440a      	add	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	e04d      	b.n	80017fa <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800175e:	f7ff fbbf 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8001762:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	441a      	add	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4a23      	ldr	r2, [pc, #140]	; (8001808 <UART_SetConfig+0x30c>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	0119      	lsls	r1, r3, #4
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	441a      	add	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fbb2 f2f3 	udiv	r2, r2, r3
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <UART_SetConfig+0x30c>)
 800179c:	fba3 0302 	umull	r0, r3, r3, r2
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	2064      	movs	r0, #100	; 0x64
 80017a4:	fb00 f303 	mul.w	r3, r0, r3
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	3332      	adds	r3, #50	; 0x32
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <UART_SetConfig+0x30c>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ba:	4419      	add	r1, r3
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	441a      	add	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <UART_SetConfig+0x30c>)
 80017d4:	fba3 0302 	umull	r0, r3, r3, r2
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	2064      	movs	r0, #100	; 0x64
 80017dc:	fb00 f303 	mul.w	r3, r0, r3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	3332      	adds	r3, #50	; 0x32
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <UART_SetConfig+0x30c>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	f003 020f 	and.w	r2, r3, #15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	440a      	add	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013800 	.word	0x40013800
 8001808:	51eb851f 	.word	0x51eb851f

0800180c <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	603a      	str	r2, [r7, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	460b      	mov	r3, r1
 800181c:	71bb      	strb	r3, [r7, #6]
 800181e:	4613      	mov	r3, r2
 8001820:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
 8001826:	f001 ff19 	bl	800365c <__critical_enter>
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <eMBASCIIInit+0x5c>)
 800182c:	220a      	movs	r2, #10
 800182e:	701a      	strb	r2, [r3, #0]

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	79b8      	ldrb	r0, [r7, #6]
 8001834:	2207      	movs	r2, #7
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	f001 f8e6 	bl	8002a08 <xMBPortSerialInit>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d002      	beq.n	8001848 <eMBASCIIInit+0x3c>
    {
        eStatus = MB_EPORTERR;
 8001842:	2303      	movs	r3, #3
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e008      	b.n	800185a <eMBASCIIInit+0x4e>
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
 8001848:	f644 6020 	movw	r0, #20000	; 0x4e20
 800184c:	f001 fb96 	bl	8002f7c <xMBPortTimersInit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <eMBASCIIInit+0x4e>
    {
        eStatus = MB_EPORTERR;
 8001856:	2303      	movs	r3, #3
 8001858:	73fb      	strb	r3, [r7, #15]
    }

    EXIT_CRITICAL_SECTION(  );
 800185a:	f001 ff0d 	bl	8003678 <__critical_exit>

    return eStatus;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000126 	.word	0x20000126

0800186c <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8001870:	f001 fef4 	bl	800365c <__critical_enter>
    vMBPortSerialEnable( TRUE, FALSE );
 8001874:	2100      	movs	r1, #0
 8001876:	2001      	movs	r0, #1
 8001878:	f001 f88e 	bl	8002998 <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <eMBASCIIStart+0x24>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
    EXIT_CRITICAL_SECTION(  );
 8001882:	f001 fef9 	bl	8003678 <__critical_exit>

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
 8001886:	2000      	movs	r0, #0
 8001888:	f001 f852 	bl	8002930 <xMBPortEventPost>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000119 	.word	0x20000119

08001894 <eMBASCIIStop>:

void
eMBASCIIStop( void )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8001898:	f001 fee0 	bl	800365c <__critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 800189c:	2100      	movs	r1, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f001 f87a 	bl	8002998 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80018a4:	f001 fb88 	bl	8002fb8 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 80018a8:	f001 fee6 	bl	8003678 <__critical_exit>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <eMBASCIIReceive>:

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 80018c0:	f001 fecc 	bl	800365c <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <eMBASCIIReceive+0x84>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d905      	bls.n	80018da <eMBASCIIReceive+0x2a>
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <eMBASCIIReceive+0x88>)
 80018d0:	4a1a      	ldr	r2, [pc, #104]	; (800193c <eMBASCIIReceive+0x8c>)
 80018d2:	219d      	movs	r1, #157	; 0x9d
 80018d4:	481a      	ldr	r0, [pc, #104]	; (8001940 <eMBASCIIReceive+0x90>)
 80018d6:	f002 fa23 	bl	8003d20 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <eMBASCIIReceive+0x84>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d91e      	bls.n	8001922 <eMBASCIIReceive+0x72>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <eMBASCIIReceive+0x94>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <eMBASCIIReceive+0x84>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f000 fa61 	bl	8001db8 <prvucMBLRC>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d112      	bne.n	8001922 <eMBASCIIReceive+0x72>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <eMBASCIIReceive+0x94>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <eMBASCIIReceive+0x84>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b02      	subs	r3, #2
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <eMBASCIIReceive+0x94>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e001      	b.n	8001926 <eMBASCIIReceive+0x76>
    }
    else
    {
        eStatus = MB_EIO;
 8001922:	2305      	movs	r3, #5
 8001924:	75fb      	strb	r3, [r7, #23]
    }
    EXIT_CRITICAL_SECTION(  );
 8001926:	f001 fea7 	bl	8003678 <__critical_exit>
    return eStatus;
 800192a:	7dfb      	ldrb	r3, [r7, #23]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000011a 	.word	0x2000011a
 8001938:	08004c74 	.word	0x08004c74
 800193c:	08004e24 	.word	0x08004e24
 8001940:	08004c9c 	.word	0x08004c9c
 8001944:	20000008 	.word	0x20000008

08001948 <eMBASCIISend>:

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	4613      	mov	r3, r2
 8001956:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
 800195c:	f001 fe7e 	bl	800365c <__critical_enter>
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <eMBASCIISend+0x98>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d131      	bne.n	80019ce <eMBASCIISend+0x86>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <eMBASCIISend+0x9c>)
 8001970:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <eMBASCIISend+0xa0>)
 8001974:	2201      	movs	r2, #1
 8001976:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <eMBASCIISend+0x9c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <eMBASCIISend+0xa0>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <eMBASCIISend+0xa0>)
 800198e:	801a      	strh	r2, [r3, #0]

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <eMBASCIISend+0x9c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <eMBASCIISend+0xa0>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4619      	mov	r1, r3
 800199c:	4610      	mov	r0, r2
 800199e:	f000 fa0b 	bl	8001db8 <prvucMBLRC>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73bb      	strb	r3, [r7, #14]
        ucASCIIBuf[usSndBufferCount++] = usLRC;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <eMBASCIISend+0xa4>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <eMBASCIISend+0xa0>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	1c59      	adds	r1, r3, #1
 80019b2:	b288      	uxth	r0, r1
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <eMBASCIISend+0xa0>)
 80019b6:	8008      	strh	r0, [r1, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	7bba      	ldrb	r2, [r7, #14]
 80019bc:	701a      	strb	r2, [r3, #0]

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <eMBASCIISend+0xa8>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 80019c4:	2101      	movs	r1, #1
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 ffe6 	bl	8002998 <vMBPortSerialEnable>
 80019cc:	e001      	b.n	80019d2 <eMBASCIISend+0x8a>
    }
    else
    {
        eStatus = MB_EIO;
 80019ce:	2305      	movs	r3, #5
 80019d0:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 80019d2:	f001 fe51 	bl	8003678 <__critical_exit>
    return eStatus;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000119 	.word	0x20000119
 80019e4:	20000120 	.word	0x20000120
 80019e8:	20000124 	.word	0x20000124
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000118 	.word	0x20000118

080019f4 <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );
 80019fe:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <xMBASCIIReceiveFSM+0x158>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <xMBASCIIReceiveFSM+0x20>
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <xMBASCIIReceiveFSM+0x15c>)
 8001a0a:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <xMBASCIIReceiveFSM+0x160>)
 8001a0c:	21e4      	movs	r1, #228	; 0xe4
 8001a0e:	4852      	ldr	r0, [pc, #328]	; (8001b58 <xMBASCIIReceiveFSM+0x164>)
 8001a10:	f002 f986 	bl	8003d20 <__assert_func>

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8001a14:	1d7b      	adds	r3, r7, #5
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 f86e 	bl	8002af8 <xMBPortSerialGetByte>
    switch ( eRcvState )
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d004      	beq.n	8001a30 <xMBASCIIReceiveFSM+0x3c>
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d058      	beq.n	8001adc <xMBASCIIReceiveFSM+0xe8>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d07a      	beq.n	8001b24 <xMBASCIIReceiveFSM+0x130>
 8001a2e:	e088      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
 8001a30:	f001 fab4 	bl	8002f9c <vMBPortTimersEnable>
        if( ucByte == ':' )
 8001a34:	797b      	ldrb	r3, [r7, #5]
 8001a36:	2b3a      	cmp	r3, #58	; 0x3a
 8001a38:	d106      	bne.n	8001a48 <xMBASCIIReceiveFSM+0x54>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <xMBASCIIReceiveFSM+0x16c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
            usRcvBufferPos = 0;
 8001a40:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	801a      	strh	r2, [r3, #0]
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
            }
        }
        break;
 8001a46:	e07c      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>
        else if( ucByte == MB_ASCII_DEFAULT_CR )
 8001a48:	797b      	ldrb	r3, [r7, #5]
 8001a4a:	2b0d      	cmp	r3, #13
 8001a4c:	d103      	bne.n	8001a56 <xMBASCIIReceiveFSM+0x62>
            eRcvState = STATE_RX_WAIT_EOF;
 8001a4e:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	701a      	strb	r2, [r3, #0]
        break;
 8001a54:	e075      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>
            ucResult = prvucMBCHAR2BIN( ucByte );
 8001a56:	797b      	ldrb	r3, [r7, #5]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f965 	bl	8001d28 <prvucMBCHAR2BIN>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71bb      	strb	r3, [r7, #6]
            switch ( eBytePos )
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <xMBASCIIReceiveFSM+0x16c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <xMBASCIIReceiveFSM+0x7e>
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d019      	beq.n	8001aa4 <xMBASCIIReceiveFSM+0xb0>
        break;
 8001a70:	e067      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2bff      	cmp	r3, #255	; 0xff
 8001a7a:	d80d      	bhi.n	8001a98 <xMBASCIIReceiveFSM+0xa4>
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <xMBASCIIReceiveFSM+0x174>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a38      	ldr	r2, [pc, #224]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001a82:	8812      	ldrh	r2, [r2, #0]
 8001a84:	b292      	uxth	r2, r2
 8001a86:	4413      	add	r3, r2
 8001a88:	79ba      	ldrb	r2, [r7, #6]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
                    eBytePos = BYTE_LOW_NIBBLE;
 8001a90:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <xMBASCIIReceiveFSM+0x16c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
                    break;
 8001a96:	e020      	b.n	8001ada <xMBASCIIReceiveFSM+0xe6>
                    eRcvState = STATE_RX_IDLE;
 8001a98:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
                    vMBPortTimersDisable(  );
 8001a9e:	f001 fa8b 	bl	8002fb8 <vMBPortTimersDisable>
                break;
 8001aa2:	e01a      	b.n	8001ada <xMBASCIIReceiveFSM+0xe6>
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <xMBASCIIReceiveFSM+0x174>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	b292      	uxth	r2, r2
 8001aae:	4611      	mov	r1, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b2d9      	uxtb	r1, r3
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <xMBASCIIReceiveFSM+0x174>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	79ba      	ldrb	r2, [r7, #6]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
                usRcvBufferPos++;
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001ad0:	801a      	strh	r2, [r3, #0]
                eBytePos = BYTE_HIGH_NIBBLE;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <xMBASCIIReceiveFSM+0x16c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
                break;
 8001ad8:	bf00      	nop
        break;
 8001ada:	e032      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
 8001adc:	797a      	ldrb	r2, [r7, #5]
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <xMBASCIIReceiveFSM+0x178>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10a      	bne.n	8001afe <xMBASCIIReceiveFSM+0x10a>
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
 8001ae8:	f001 fa66 	bl	8002fb8 <vMBPortTimersDisable>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8001af2:	2001      	movs	r0, #1
 8001af4:	f000 ff1c 	bl	8002930 <xMBPortEventPost>
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
        }
        break;
 8001afc:	e021      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>
        else if( ucByte == ':' )
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	2b3a      	cmp	r3, #58	; 0x3a
 8001b02:	d10b      	bne.n	8001b1c <xMBASCIIReceiveFSM+0x128>
            eBytePos = BYTE_HIGH_NIBBLE;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <xMBASCIIReceiveFSM+0x16c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
            usRcvBufferPos = 0;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
            eRcvState = STATE_RX_RCV;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
            vMBPortTimersEnable(  );
 8001b16:	f001 fa41 	bl	8002f9c <vMBPortTimersEnable>
        break;
 8001b1a:	e012      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>
            eRcvState = STATE_RX_IDLE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
        break;
 8001b22:	e00e      	b.n	8001b42 <xMBASCIIReceiveFSM+0x14e>

    case STATE_RX_IDLE:
        if( ucByte == ':' )
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	2b3a      	cmp	r3, #58	; 0x3a
 8001b28:	d10a      	bne.n	8001b40 <xMBASCIIReceiveFSM+0x14c>
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
 8001b2a:	f001 fa37 	bl	8002f9c <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <xMBASCIIReceiveFSM+0x170>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	801a      	strh	r2, [r3, #0]
            eBytePos = BYTE_HIGH_NIBBLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <xMBASCIIReceiveFSM+0x16c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
            eRcvState = STATE_RX_RCV;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <xMBASCIIReceiveFSM+0x168>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001b40:	bf00      	nop
    }

    return xNeedPoll;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000118 	.word	0x20000118
 8001b50:	08004cc0 	.word	0x08004cc0
 8001b54:	08004e34 	.word	0x08004e34
 8001b58:	08004c9c 	.word	0x08004c9c
 8001b5c:	20000119 	.word	0x20000119
 8001b60:	2000011c 	.word	0x2000011c
 8001b64:	2000011a 	.word	0x2000011a
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000126 	.word	0x20000126

08001b70 <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <xMBASCIITransmitFSM+0x13c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <xMBASCIITransmitFSM+0x22>
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <xMBASCIITransmitFSM+0x140>)
 8001b86:	4a4b      	ldr	r2, [pc, #300]	; (8001cb4 <xMBASCIITransmitFSM+0x144>)
 8001b88:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001b8c:	484a      	ldr	r0, [pc, #296]	; (8001cb8 <xMBASCIITransmitFSM+0x148>)
 8001b8e:	f002 f8c7 	bl	8003d20 <__assert_func>
    switch ( eSndState )
 8001b92:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <xMBASCIITransmitFSM+0x14c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	f200 8082 	bhi.w	8001ca2 <xMBASCIITransmitFSM+0x132>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <xMBASCIITransmitFSM+0x34>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c99 	.word	0x08001c99
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bd3 	.word	0x08001bd3
 8001bb0:	08001c65 	.word	0x08001c65
 8001bb4:	08001c79 	.word	0x08001c79
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
 8001bb8:	233a      	movs	r3, #58	; 0x3a
 8001bba:	71bb      	strb	r3, [r7, #6]
        xMBPortSerialPutByte( ( CHAR )ucByte );
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 ff88 	bl	8002ad4 <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <xMBASCIITransmitFSM+0x14c>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
        eBytePos = BYTE_HIGH_NIBBLE;
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <xMBASCIITransmitFSM+0x150>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
        break;
 8001bd0:	e067      	b.n	8001ca2 <xMBASCIITransmitFSM+0x132>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <xMBASCIITransmitFSM+0x154>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03b      	beq.n	8001c54 <xMBASCIITransmitFSM+0xe4>
        {
            switch ( eBytePos )
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <xMBASCIITransmitFSM+0x150>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <xMBASCIITransmitFSM+0x7c>
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d013      	beq.n	8001c12 <xMBASCIITransmitFSM+0xa2>
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
            eSndState = STATE_TX_END;
        }
        break;
 8001bea:	e05a      	b.n	8001ca2 <xMBASCIITransmitFSM+0x132>
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <xMBASCIITransmitFSM+0x158>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f8b5 	bl	8001d68 <prvucMBBIN2CHAR>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71bb      	strb	r3, [r7, #6]
                xMBPortSerialPutByte( ( CHAR ) ucByte );
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 ff65 	bl	8002ad4 <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <xMBASCIITransmitFSM+0x150>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
                break;
 8001c10:	e027      	b.n	8001c62 <xMBASCIITransmitFSM+0xf2>
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <xMBASCIITransmitFSM+0x158>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f8a1 	bl	8001d68 <prvucMBBIN2CHAR>
 8001c26:	4603      	mov	r3, r0
 8001c28:	71bb      	strb	r3, [r7, #6]
                xMBPortSerialPutByte( ( CHAR )ucByte );
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 ff51 	bl	8002ad4 <xMBPortSerialPutByte>
                pucSndBufferCur++;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <xMBASCIITransmitFSM+0x158>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <xMBASCIITransmitFSM+0x158>)
 8001c3a:	6013      	str	r3, [r2, #0]
                eBytePos = BYTE_HIGH_NIBBLE;
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <xMBASCIITransmitFSM+0x150>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
                usSndBufferCount--;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <xMBASCIITransmitFSM+0x154>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <xMBASCIITransmitFSM+0x154>)
 8001c4e:	801a      	strh	r2, [r3, #0]
                break;
 8001c50:	bf00      	nop
 8001c52:	e006      	b.n	8001c62 <xMBASCIITransmitFSM+0xf2>
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
 8001c54:	200d      	movs	r0, #13
 8001c56:	f000 ff3d 	bl	8002ad4 <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <xMBASCIITransmitFSM+0x14c>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	701a      	strb	r2, [r3, #0]
        break;
 8001c60:	e01f      	b.n	8001ca2 <xMBASCIITransmitFSM+0x132>
 8001c62:	e01e      	b.n	8001ca2 <xMBASCIITransmitFSM+0x132>

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <xMBASCIITransmitFSM+0x15c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 ff32 	bl	8002ad4 <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <xMBASCIITransmitFSM+0x14c>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	701a      	strb	r2, [r3, #0]
        break;
 8001c76:	e014      	b.n	8001ca2 <xMBASCIITransmitFSM+0x132>

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <xMBASCIITransmitFSM+0x14c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8001c7e:	2003      	movs	r0, #3
 8001c80:	f000 fe56 	bl	8002930 <xMBPortEventPost>
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 fe84 	bl	8002998 <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <xMBASCIITransmitFSM+0x14c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
        break;
 8001c96:	e004      	b.n	8001ca2 <xMBASCIITransmitFSM+0x132>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 fe7c 	bl	8002998 <vMBPortSerialEnable>
        break;
 8001ca0:	bf00      	nop
    }

    return xNeedPoll;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000119 	.word	0x20000119
 8001cb0:	08004cdc 	.word	0x08004cdc
 8001cb4:	08004e48 	.word	0x08004e48
 8001cb8:	08004c9c 	.word	0x08004c9c
 8001cbc:	20000118 	.word	0x20000118
 8001cc0:	2000011c 	.word	0x2000011c
 8001cc4:	20000124 	.word	0x20000124
 8001cc8:	20000120 	.word	0x20000120
 8001ccc:	20000126 	.word	0x20000126

08001cd0 <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    switch ( eRcvState )
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <xMBASCIITimerT1SExpired+0x48>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d803      	bhi.n	8001ce8 <xMBASCIITimerT1SExpired+0x18>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <xMBASCIITimerT1SExpired+0x48>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
        break;
 8001ce6:	e011      	b.n	8001d0c <xMBASCIITimerT1SExpired+0x3c>

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <xMBASCIITimerT1SExpired+0x48>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00b      	beq.n	8001d0a <xMBASCIITimerT1SExpired+0x3a>
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <xMBASCIITimerT1SExpired+0x48>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d006      	beq.n	8001d0a <xMBASCIITimerT1SExpired+0x3a>
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <xMBASCIITimerT1SExpired+0x4c>)
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <xMBASCIITimerT1SExpired+0x50>)
 8001d00:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001d04:	4807      	ldr	r0, [pc, #28]	; (8001d24 <xMBASCIITimerT1SExpired+0x54>)
 8001d06:	f002 f80b 	bl	8003d20 <__assert_func>
        break;
 8001d0a:	bf00      	nop
    }
    vMBPortTimersDisable(  );
 8001d0c:	f001 f954 	bl	8002fb8 <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000119 	.word	0x20000119
 8001d1c:	08004cf8 	.word	0x08004cf8
 8001d20:	08004e5c 	.word	0x08004e5c
 8001d24:	08004c9c 	.word	0x08004c9c

08001d28 <prvucMBCHAR2BIN>:


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b2f      	cmp	r3, #47	; 0x2f
 8001d36:	d906      	bls.n	8001d46 <prvucMBCHAR2BIN+0x1e>
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b39      	cmp	r3, #57	; 0x39
 8001d3c:	d803      	bhi.n	8001d46 <prvucMBCHAR2BIN+0x1e>
    {
        return ( UCHAR )( ucCharacter - '0' );
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	3b30      	subs	r3, #48	; 0x30
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e00a      	b.n	8001d5c <prvucMBCHAR2BIN+0x34>
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d906      	bls.n	8001d5a <prvucMBCHAR2BIN+0x32>
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b46      	cmp	r3, #70	; 0x46
 8001d50:	d803      	bhi.n	8001d5a <prvucMBCHAR2BIN+0x32>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3b37      	subs	r3, #55	; 0x37
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e000      	b.n	8001d5c <prvucMBCHAR2BIN+0x34>
    }
    else
    {
        return 0xFF;
 8001d5a:	23ff      	movs	r3, #255	; 0xff
    }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
	...

08001d68 <prvucMBBIN2CHAR>:

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
    if( ucByte <= 0x09 )
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	d803      	bhi.n	8001d80 <prvucMBBIN2CHAR+0x18>
    {
        return ( UCHAR )( '0' + ucByte );
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	3330      	adds	r3, #48	; 0x30
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e010      	b.n	8001da2 <prvucMBBIN2CHAR+0x3a>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b09      	cmp	r3, #9
 8001d84:	d906      	bls.n	8001d94 <prvucMBBIN2CHAR+0x2c>
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d803      	bhi.n	8001d94 <prvucMBBIN2CHAR+0x2c>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	3337      	adds	r3, #55	; 0x37
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e006      	b.n	8001da2 <prvucMBBIN2CHAR+0x3a>
    }
    else
    {
        /* Programming error. */
        assert( 0 );
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <prvucMBBIN2CHAR+0x44>)
 8001d96:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <prvucMBBIN2CHAR+0x48>)
 8001d98:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <prvucMBBIN2CHAR+0x4c>)
 8001d9e:	f001 ffbf 	bl	8003d20 <__assert_func>
    }
    return '0';
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	08004d3c 	.word	0x08004d3c
 8001db0:	08004e74 	.word	0x08004e74
 8001db4:	08004c9c 	.word	0x08004c9c

08001db8 <prvucMBLRC>:


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
    UCHAR           ucLRC = 0;  /* LRC char initialized */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]

    while( usLen-- )
 8001dc8:	e006      	b.n	8001dd8 <prvucMBLRC+0x20>
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	807a      	strh	r2, [r7, #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f3      	bne.n	8001dca <prvucMBLRC+0x12>
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	425b      	negs	r3, r3
 8001de6:	73fb      	strb	r3, [r7, #15]
    return ucLRC;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d16c      	bne.n	8001ee4 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	8abb      	ldrh	r3, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8001e24:	8abb      	ldrh	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d049      	beq.n	8001ede <eMBFuncReadCoils+0xea>
 8001e4a:	8a7b      	ldrh	r3, [r7, #18]
 8001e4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e50:	d245      	bcs.n	8001ede <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	60fa      	str	r2, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8001e72:	8a7b      	ldrh	r3, [r7, #18]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8001e7c:	8a7b      	ldrh	r3, [r7, #18]
 8001e7e:	08db      	lsrs	r3, r3, #3
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	75fb      	strb	r3, [r7, #23]
 8001e88:	e003      	b.n	8001e92 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8001e8a:	8a7b      	ldrh	r3, [r7, #18]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	60fa      	str	r2, [r7, #12]
 8001e98:	7dfa      	ldrb	r2, [r7, #23]
 8001e9a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 8001ea8:	8a7a      	ldrh	r2, [r7, #18]
 8001eaa:	8ab9      	ldrh	r1, [r7, #20]
 8001eac:	2300      	movs	r3, #0
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f001 fbb2 	bl	8003618 <eMBRegCoilsCB>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	72fb      	strb	r3, [r7, #11]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fb85 	bl	80025d0 <prveMBError2Exception>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8001eca:	e00d      	b.n	8001ee8 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	881a      	ldrh	r2, [r3, #0]
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001edc:	e004      	b.n	8001ee8 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	75bb      	strb	r3, [r7, #22]
 8001ee2:	e001      	b.n	8001ee8 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8001ee8:	7dbb      	ldrb	r3, [r7, #22]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d140      	bne.n	8001f8a <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	89bb      	ldrh	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d128      	bne.n	8001f84 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3303      	adds	r3, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8001f38:	2bff      	cmp	r3, #255	; 0xff
 8001f3a:	d004      	beq.n	8001f46 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11e      	bne.n	8001f84 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2bff      	cmp	r3, #255	; 0xff
 8001f52:	d102      	bne.n	8001f5a <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	723b      	strb	r3, [r7, #8]
 8001f58:	e001      	b.n	8001f5e <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
 8001f5e:	89b9      	ldrh	r1, [r7, #12]
 8001f60:	f107 0008 	add.w	r0, r7, #8
 8001f64:	2301      	movs	r3, #1
 8001f66:	2201      	movs	r2, #1
 8001f68:	f001 fb56 	bl	8003618 <eMBRegCoilsCB>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	72fb      	strb	r3, [r7, #11]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001f70:	7afb      	ldrb	r3, [r7, #11]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fb29 	bl	80025d0 <prveMBError2Exception>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8001f82:	e004      	b.n	8001f8e <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001f84:	2303      	movs	r3, #3
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e001      	b.n	8001f8e <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d954      	bls.n	8002058 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	89bb      	ldrh	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3303      	adds	r3, #3
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	795b      	ldrb	r3, [r3, #5]
 8001fec:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	e003      	b.n	800200e <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	b29b      	uxth	r3, r3
 800200c:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 800200e:	897b      	ldrh	r3, [r7, #10]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01e      	beq.n	8002052 <eMBFuncWriteMultipleCoils+0xba>
 8002014:	897b      	ldrh	r3, [r7, #10]
 8002016:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 800201a:	d81a      	bhi.n	8002052 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	7a7b      	ldrb	r3, [r7, #9]
 8002020:	429a      	cmp	r2, r3
 8002022:	d116      	bne.n	8002052 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	1d98      	adds	r0, r3, #6
            eRegStatus =
 8002028:	897a      	ldrh	r2, [r7, #10]
 800202a:	89b9      	ldrh	r1, [r7, #12]
 800202c:	2301      	movs	r3, #1
 800202e:	f001 faf3 	bl	8003618 <eMBRegCoilsCB>
 8002032:	4603      	mov	r3, r0
 8002034:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002036:	7a3b      	ldrb	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800203c:	7a3b      	ldrb	r3, [r7, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fac6 	bl	80025d0 <prveMBError2Exception>
 8002044:	4603      	mov	r3, r0
 8002046:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8002048:	e008      	b.n	800205c <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2205      	movs	r2, #5
 800204e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002050:	e004      	b.n	800205c <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002052:	2303      	movs	r3, #3
 8002054:	73bb      	strb	r3, [r7, #14]
 8002056:	e001      	b.n	800205c <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002058:	2303      	movs	r3, #3
 800205a:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 800205c:	7bbb      	ldrb	r3, [r7, #14]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002070:	2300      	movs	r3, #0
 8002072:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d16c      	bne.n	8002156 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3302      	adds	r3, #2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b29a      	uxth	r2, r3
 8002090:	8abb      	ldrh	r3, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002096:	8abb      	ldrh	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3303      	adds	r3, #3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	8a7b      	ldrh	r3, [r7, #18]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 80020b6:	8a7b      	ldrh	r3, [r7, #18]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d049      	beq.n	8002150 <eMBFuncReadDiscreteInputs+0xea>
 80020bc:	8a7b      	ldrh	r3, [r7, #18]
 80020be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020c2:	d245      	bcs.n	8002150 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	2202      	movs	r2, #2
 80020d6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80020e4:	8a7b      	ldrh	r3, [r7, #18]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80020ee:	8a7b      	ldrh	r3, [r7, #18]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
 80020fa:	e003      	b.n	8002104 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80020fc:	8a7b      	ldrh	r3, [r7, #18]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	b29b      	uxth	r3, r3
 8002102:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	60fa      	str	r2, [r7, #12]
 800210a:	7dfa      	ldrb	r2, [r7, #23]
 800210c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 800211a:	8a7a      	ldrh	r2, [r7, #18]
 800211c:	8abb      	ldrh	r3, [r7, #20]
 800211e:	4619      	mov	r1, r3
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f001 fa8c 	bl	800363e <eMBRegDiscreteCB>
 8002126:	4603      	mov	r3, r0
 8002128:	72fb      	strb	r3, [r7, #11]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800212a:	7afb      	ldrb	r3, [r7, #11]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fa4c 	bl	80025d0 <prveMBError2Exception>
 8002138:	4603      	mov	r3, r0
 800213a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800213c:	e00d      	b.n	800215a <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4413      	add	r3, r2
 8002148:	b29a      	uxth	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800214e:	e004      	b.n	800215a <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002150:	2303      	movs	r3, #3
 8002152:	75bb      	strb	r3, [r7, #22]
 8002154:	e001      	b.n	800215a <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002156:	2303      	movs	r3, #3
 8002158:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800215a:	7dbb      	ldrb	r3, [r7, #22]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d122      	bne.n	80021c0 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3301      	adds	r3, #1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3302      	adds	r3, #2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b29a      	uxth	r2, r3
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002194:	89bb      	ldrh	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	1cd8      	adds	r0, r3, #3
 800219e:	89b9      	ldrh	r1, [r7, #12]
 80021a0:	2301      	movs	r3, #1
 80021a2:	2201      	movs	r2, #1
 80021a4:	f001 f9c4 	bl	8003530 <eMBRegHoldingCB>
 80021a8:	4603      	mov	r3, r0
 80021aa:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fa0b 	bl	80025d0 <prveMBError2Exception>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e001      	b.n	80021c4 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80021c0:	2303      	movs	r3, #3
 80021c2:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d946      	bls.n	8002272 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3302      	adds	r3, #2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80021fe:	89bb      	ldrh	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3303      	adds	r3, #3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b29a      	uxth	r2, r3
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	4313      	orrs	r3, r2
 800221c:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	795b      	ldrb	r3, [r3, #5]
 8002222:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8002224:	897b      	ldrh	r3, [r7, #10]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d020      	beq.n	800226c <eMBFuncWriteMultipleHoldingRegister+0x9e>
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	2b78      	cmp	r3, #120	; 0x78
 800222e:	d81d      	bhi.n	800226c <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002230:	897b      	ldrh	r3, [r7, #10]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002238:	7a7a      	ldrb	r2, [r7, #9]
 800223a:	429a      	cmp	r2, r3
 800223c:	d116      	bne.n	800226c <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	1d98      	adds	r0, r3, #6
            eRegStatus =
 8002242:	897a      	ldrh	r2, [r7, #10]
 8002244:	89b9      	ldrh	r1, [r7, #12]
 8002246:	2301      	movs	r3, #1
 8002248:	f001 f972 	bl	8003530 <eMBRegHoldingCB>
 800224c:	4603      	mov	r3, r0
 800224e:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002250:	7a3b      	ldrb	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002256:	7a3b      	ldrb	r3, [r7, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f9b9 	bl	80025d0 <prveMBError2Exception>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002262:	e008      	b.n	8002276 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2205      	movs	r2, #5
 8002268:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800226a:	e004      	b.n	8002276 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800226c:	2303      	movs	r3, #3
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e001      	b.n	8002276 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002272:	2303      	movs	r3, #3
 8002274:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d15c      	bne.n	8002350 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	8abb      	ldrh	r3, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80022b0:	8abb      	ldrh	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3303      	adds	r3, #3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80022ca:	8a7b      	ldrh	r3, [r7, #18]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d03c      	beq.n	800234a <eMBFuncReadHoldingRegister+0xca>
 80022d0:	8a7b      	ldrh	r3, [r7, #18]
 80022d2:	2b7d      	cmp	r3, #125	; 0x7d
 80022d4:	d839      	bhi.n	800234a <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60fa      	str	r2, [r7, #12]
 80022e6:	2203      	movs	r2, #3
 80022e8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80022f6:	8a7b      	ldrh	r3, [r7, #18]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1c59      	adds	r1, r3, #1
 80022fe:	60f9      	str	r1, [r7, #12]
 8002300:	0052      	lsls	r2, r2, #1
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002312:	8a7a      	ldrh	r2, [r7, #18]
 8002314:	8ab9      	ldrh	r1, [r7, #20]
 8002316:	2300      	movs	r3, #0
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f001 f909 	bl	8003530 <eMBRegHoldingCB>
 800231e:	4603      	mov	r3, r0
 8002320:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f950 	bl	80025d0 <prveMBError2Exception>
 8002330:	4603      	mov	r3, r0
 8002332:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002334:	e00e      	b.n	8002354 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	8a7b      	ldrh	r3, [r7, #18]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	b29b      	uxth	r3, r3
 8002340:	4413      	add	r3, r2
 8002342:	b29a      	uxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002348:	e004      	b.n	8002354 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800234a:	2303      	movs	r3, #3
 800234c:	75fb      	strb	r3, [r7, #23]
 800234e:	e001      	b.n	8002354 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002350:	2303      	movs	r3, #3
 8002352:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002354:	7dfb      	ldrb	r3, [r7, #23]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	2b09      	cmp	r3, #9
 8002372:	f240 8099 	bls.w	80024a8 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3301      	adds	r3, #1
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b29a      	uxth	r2, r3
 800238a:	8abb      	ldrh	r3, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8002390:	8abb      	ldrh	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3303      	adds	r3, #3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	8a7b      	ldrh	r3, [r7, #18]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3305      	adds	r3, #5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3306      	adds	r3, #6
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	8a3b      	ldrh	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 80023ca:	8a3b      	ldrh	r3, [r7, #16]
 80023cc:	3301      	adds	r3, #1
 80023ce:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3307      	adds	r3, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3308      	adds	r3, #8
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7a5b      	ldrb	r3, [r3, #9]
 80023ee:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80023f0:	8a7b      	ldrh	r3, [r7, #18]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d056      	beq.n	80024a4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80023f6:	8a7b      	ldrh	r3, [r7, #18]
 80023f8:	2b7d      	cmp	r3, #125	; 0x7d
 80023fa:	d853      	bhi.n	80024a4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d050      	beq.n	80024a4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	2b79      	cmp	r3, #121	; 0x79
 8002406:	d84d      	bhi.n	80024a4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	005a      	lsls	r2, r3, #1
 800240c:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800240e:	429a      	cmp	r2, r3
 8002410:	d148      	bne.n	80024a4 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 000a 	add.w	r0, r3, #10
 8002418:	89fa      	ldrh	r2, [r7, #14]
 800241a:	8a39      	ldrh	r1, [r7, #16]
 800241c:	2301      	movs	r3, #1
 800241e:	f001 f887 	bl	8003530 <eMBRegHoldingCB>
 8002422:	4603      	mov	r3, r0
 8002424:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d131      	bne.n	8002490 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	60ba      	str	r2, [r7, #8]
 800243c:	2217      	movs	r2, #23
 800243e:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800244c:	8a7b      	ldrh	r3, [r7, #18]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c59      	adds	r1, r3, #1
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
 8002468:	8a7a      	ldrh	r2, [r7, #18]
 800246a:	8ab9      	ldrh	r1, [r7, #20]
 800246c:	2300      	movs	r3, #0
 800246e:	68b8      	ldr	r0, [r7, #8]
 8002470:	f001 f85e 	bl	8003530 <eMBRegHoldingCB>
 8002474:	4603      	mov	r3, r0
 8002476:	75bb      	strb	r3, [r7, #22]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8002478:	7dbb      	ldrb	r3, [r7, #22]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	8a7b      	ldrh	r3, [r7, #18]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	4413      	add	r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8002490:	7dbb      	ldrb	r3, [r7, #22]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002496:	7dbb      	ldrb	r3, [r7, #22]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f899 	bl	80025d0 <prveMBError2Exception>
 800249e:	4603      	mov	r3, r0
 80024a0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80024a2:	e001      	b.n	80024a8 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80024a4:	2303      	movs	r3, #3
 80024a6:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d15f      	bne.n	8002588 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3301      	adds	r3, #1
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3302      	adds	r3, #2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	8abb      	ldrh	r3, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80024e2:	8abb      	ldrh	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3303      	adds	r3, #3
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	8a7b      	ldrh	r3, [r7, #18]
 80024fe:	4313      	orrs	r3, r2
 8002500:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8002502:	8a7b      	ldrh	r3, [r7, #18]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d03c      	beq.n	8002582 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002508:	8a7b      	ldrh	r3, [r7, #18]
 800250a:	2b7c      	cmp	r3, #124	; 0x7c
 800250c:	d839      	bhi.n	8002582 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60fa      	str	r2, [r7, #12]
 800251e:	2204      	movs	r2, #4
 8002520:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800252e:	8a7b      	ldrh	r3, [r7, #18]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1c59      	adds	r1, r3, #1
 8002536:	60f9      	str	r1, [r7, #12]
 8002538:	0052      	lsls	r2, r2, #1
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	801a      	strh	r2, [r3, #0]

            eRegStatus =
 800254a:	8a7a      	ldrh	r2, [r7, #18]
 800254c:	8abb      	ldrh	r3, [r7, #20]
 800254e:	4619      	mov	r1, r3
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 ffa9 	bl	80034a8 <eMBRegInputCB>
 8002556:	4603      	mov	r3, r0
 8002558:	72fb      	strb	r3, [r7, #11]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f834 	bl	80025d0 <prveMBError2Exception>
 8002568:	4603      	mov	r3, r0
 800256a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800256c:	e00e      	b.n	800258c <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	8a7b      	ldrh	r3, [r7, #18]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b29a      	uxth	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002580:	e004      	b.n	800258c <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002582:	2303      	movs	r3, #3
 8002584:	75fb      	strb	r3, [r7, #23]
 8002586:	e001      	b.n	800258c <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002588:	2303      	movs	r3, #3
 800258a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800258c:	7dfb      	ldrb	r3, [r7, #23]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	1c58      	adds	r0, r3, #1
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <eMBFuncReportSlaveID+0x30>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <eMBFuncReportSlaveID+0x34>)
 80025ae:	f001 fc11 	bl	8003dd4 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <eMBFuncReportSlaveID+0x30>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000148 	.word	0x20000148
 80025cc:	20000128 	.word	0x20000128

080025d0 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d006      	beq.n	80025ee <prveMBError2Exception+0x1e>
 80025e0:	2b07      	cmp	r3, #7
 80025e2:	d007      	beq.n	80025f4 <prveMBError2Exception+0x24>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <prveMBError2Exception+0x2a>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
            break;
 80025ec:	e008      	b.n	8002600 <prveMBError2Exception+0x30>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80025ee:	2302      	movs	r3, #2
 80025f0:	73fb      	strb	r3, [r7, #15]
            break;
 80025f2:	e005      	b.n	8002600 <prveMBError2Exception+0x30>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80025f4:	2306      	movs	r3, #6
 80025f6:	73fb      	strb	r3, [r7, #15]
            break;
 80025f8:	e002      	b.n	8002600 <prveMBError2Exception+0x30>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80025fa:	2304      	movs	r3, #4
 80025fc:	73fb      	strb	r3, [r7, #15]
            break;
 80025fe:	bf00      	nop
    }

    return eStatus;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
 8002618:	460b      	mov	r3, r1
 800261a:	71bb      	strb	r3, [r7, #6]
 800261c:	4613      	mov	r3, r2
 800261e:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8002624:	79bb      	ldrb	r3, [r7, #6]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <eMBInit+0x2a>
 800262a:	79bb      	ldrb	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	2bf7      	cmp	r3, #247	; 0xf7
 8002634:	d902      	bls.n	800263c <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8002636:	2302      	movs	r3, #2
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e05f      	b.n	80026fc <eMBInit+0xf0>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800263c:	4a32      	ldr	r2, [pc, #200]	; (8002708 <eMBInit+0xfc>)
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <eMBInit+0x42>
 8002648:	2b01      	cmp	r3, #1
 800264a:	d022      	beq.n	8002692 <eMBInit+0x86>
 800264c:	e043      	b.n	80026d6 <eMBInit+0xca>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <eMBInit+0x100>)
 8002650:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <eMBInit+0x104>)
 8002652:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8002654:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <eMBInit+0x108>)
 8002656:	4a30      	ldr	r2, [pc, #192]	; (8002718 <eMBInit+0x10c>)
 8002658:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <eMBInit+0x110>)
 800265c:	4a30      	ldr	r2, [pc, #192]	; (8002720 <eMBInit+0x114>)
 800265e:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <eMBInit+0x118>)
 8002662:	4a31      	ldr	r2, [pc, #196]	; (8002728 <eMBInit+0x11c>)
 8002664:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <eMBInit+0x120>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <eMBInit+0x124>)
 800266e:	4a31      	ldr	r2, [pc, #196]	; (8002734 <eMBInit+0x128>)
 8002670:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <eMBInit+0x12c>)
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <eMBInit+0x130>)
 8002676:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <eMBInit+0x134>)
 800267a:	4a32      	ldr	r2, [pc, #200]	; (8002744 <eMBInit+0x138>)
 800267c:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <eMBInit+0xfc>)
 8002680:	7818      	ldrb	r0, [r3, #0]
 8002682:	7e3b      	ldrb	r3, [r7, #24]
 8002684:	7979      	ldrb	r1, [r7, #5]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	f000 fcfa 	bl	8003080 <eMBRTUInit>
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]
            break;
 8002690:	e023      	b.n	80026da <eMBInit+0xce>
#endif
#if MB_ASCII_ENABLED > 0
        case MB_ASCII:
            pvMBFrameStartCur = eMBASCIIStart;
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <eMBInit+0x100>)
 8002694:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <eMBInit+0x13c>)
 8002696:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBASCIIStop;
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <eMBInit+0x108>)
 800269a:	4a2c      	ldr	r2, [pc, #176]	; (800274c <eMBInit+0x140>)
 800269c:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBASCIISend;
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <eMBInit+0x110>)
 80026a0:	4a2b      	ldr	r2, [pc, #172]	; (8002750 <eMBInit+0x144>)
 80026a2:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBASCIIReceive;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <eMBInit+0x118>)
 80026a6:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <eMBInit+0x148>)
 80026a8:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <eMBInit+0x120>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <eMBInit+0x124>)
 80026b2:	4a29      	ldr	r2, [pc, #164]	; (8002758 <eMBInit+0x14c>)
 80026b4:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <eMBInit+0x12c>)
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <eMBInit+0x150>)
 80026ba:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <eMBInit+0x134>)
 80026be:	4a28      	ldr	r2, [pc, #160]	; (8002760 <eMBInit+0x154>)
 80026c0:	601a      	str	r2, [r3, #0]

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <eMBInit+0xfc>)
 80026c4:	7818      	ldrb	r0, [r3, #0]
 80026c6:	7e3b      	ldrb	r3, [r7, #24]
 80026c8:	7979      	ldrb	r1, [r7, #5]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	f7ff f89e 	bl	800180c <eMBASCIIInit>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
            break;
 80026d4:	e001      	b.n	80026da <eMBInit+0xce>
#endif
        default:
            eStatus = MB_EINVAL;
 80026d6:	2302      	movs	r3, #2
 80026d8:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <eMBInit+0xf0>
        {
            if( !xMBPortEventInit(  ) )
 80026e0:	f000 f91a 	bl	8002918 <xMBPortEventInit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <eMBInit+0xe4>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80026ea:	2303      	movs	r3, #3
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e005      	b.n	80026fc <eMBInit+0xf0>
            }
            else
            {
                eMBCurrentMode = eMode;
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <eMBInit+0x158>)
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <eMBInit+0x15c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000014a 	.word	0x2000014a
 800270c:	20000150 	.word	0x20000150
 8002710:	080030f9 	.word	0x080030f9
 8002714:	20000154 	.word	0x20000154
 8002718:	08003121 	.word	0x08003121
 800271c:	2000014c 	.word	0x2000014c
 8002720:	080031d9 	.word	0x080031d9
 8002724:	20000158 	.word	0x20000158
 8002728:	0800313d 	.word	0x0800313d
 800272c:	2000015c 	.word	0x2000015c
 8002730:	200001a8 	.word	0x200001a8
 8002734:	080032a1 	.word	0x080032a1
 8002738:	200001a0 	.word	0x200001a0
 800273c:	08003371 	.word	0x08003371
 8002740:	200001a4 	.word	0x200001a4
 8002744:	08003421 	.word	0x08003421
 8002748:	0800186d 	.word	0x0800186d
 800274c:	08001895 	.word	0x08001895
 8002750:	08001949 	.word	0x08001949
 8002754:	080018b1 	.word	0x080018b1
 8002758:	080019f5 	.word	0x080019f5
 800275c:	08001b71 	.word	0x08001b71
 8002760:	08001cd1 	.word	0x08001cd1
 8002764:	2000014b 	.word	0x2000014b
 8002768:	2000000c 	.word	0x2000000c

0800276c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002772:	2300      	movs	r3, #0
 8002774:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <eMBEnable+0x30>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <eMBEnable+0x34>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <eMBEnable+0x30>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e001      	b.n	8002790 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800278c:	2306      	movs	r3, #6
 800278e:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002790:	79fb      	ldrb	r3, [r7, #7]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000000c 	.word	0x2000000c
 80027a0:	20000150 	.word	0x20000150

080027a4 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80027aa:	2300      	movs	r3, #0
 80027ac:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <eMBPoll+0x14c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 80027b6:	2306      	movs	r3, #6
 80027b8:	e095      	b.n	80028e6 <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80027ba:	1cbb      	adds	r3, r7, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f8cd 	bl	800295c <xMBPortEventGet>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 808d 	bne.w	80028e4 <eMBPoll+0x140>
    {
        switch ( eEvent )
 80027ca:	78bb      	ldrb	r3, [r7, #2]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	f200 8089 	bhi.w	80028e4 <eMBPoll+0x140>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <eMBPoll+0x34>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080028e5 	.word	0x080028e5
 80027dc:	080027e9 	.word	0x080027e9
 80027e0:	0800281b 	.word	0x0800281b
 80027e4:	080028e5 	.word	0x080028e5
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <eMBPoll+0x150>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a42      	ldr	r2, [pc, #264]	; (80028f8 <eMBPoll+0x154>)
 80027ee:	4943      	ldr	r1, [pc, #268]	; (80028fc <eMBPoll+0x158>)
 80027f0:	4843      	ldr	r0, [pc, #268]	; (8002900 <eMBPoll+0x15c>)
 80027f2:	4798      	blx	r3
 80027f4:	4603      	mov	r3, r0
 80027f6:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d16f      	bne.n	80028de <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80027fe:	4b40      	ldr	r3, [pc, #256]	; (8002900 <eMBPoll+0x15c>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b40      	ldr	r3, [pc, #256]	; (8002904 <eMBPoll+0x160>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d003      	beq.n	8002812 <eMBPoll+0x6e>
 800280a:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <eMBPoll+0x15c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d165      	bne.n	80028de <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8002812:	2002      	movs	r0, #2
 8002814:	f000 f88c 	bl	8002930 <xMBPortEventPost>
                }
            }
            break;
 8002818:	e061      	b.n	80028de <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <eMBPoll+0x158>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	4b39      	ldr	r3, [pc, #228]	; (8002908 <eMBPoll+0x164>)
 8002822:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <eMBPoll+0x168>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	e01f      	b.n	8002870 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002830:	4a37      	ldr	r2, [pc, #220]	; (8002910 <eMBPoll+0x16c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01d      	beq.n	8002878 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800283c:	4a34      	ldr	r2, [pc, #208]	; (8002910 <eMBPoll+0x16c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <eMBPoll+0x164>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d10e      	bne.n	800286a <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <eMBPoll+0x16c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a29      	ldr	r2, [pc, #164]	; (80028fc <eMBPoll+0x158>)
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4927      	ldr	r1, [pc, #156]	; (80028f8 <eMBPoll+0x154>)
 800285c:	4610      	mov	r0, r2
 800285e:	4798      	blx	r3
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <eMBPoll+0x168>)
 8002866:	701a      	strb	r2, [r3, #0]
                    break;
 8002868:	e007      	b.n	800287a <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3301      	adds	r3, #1
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b0f      	cmp	r3, #15
 8002874:	dddc      	ble.n	8002830 <eMBPoll+0x8c>
 8002876:	e000      	b.n	800287a <eMBPoll+0xd6>
                    break;
 8002878:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <eMBPoll+0x15c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d02f      	beq.n	80028e2 <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <eMBPoll+0x168>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01d      	beq.n	80028c6 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <eMBPoll+0x154>)
 800288c:	2200      	movs	r2, #0
 800288e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <eMBPoll+0x164>)
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <eMBPoll+0x158>)
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <eMBPoll+0x154>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	1c58      	adds	r0, r3, #1
 800289e:	b284      	uxth	r4, r0
 80028a0:	4815      	ldr	r0, [pc, #84]	; (80028f8 <eMBPoll+0x154>)
 80028a2:	8004      	strh	r4, [r0, #0]
 80028a4:	440b      	add	r3, r1
 80028a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <eMBPoll+0x158>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <eMBPoll+0x154>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	b288      	uxth	r0, r1
 80028ba:	490f      	ldr	r1, [pc, #60]	; (80028f8 <eMBPoll+0x154>)
 80028bc:	8008      	strh	r0, [r1, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <eMBPoll+0x168>)
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <eMBPoll+0x170>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <eMBPoll+0x160>)
 80028cc:	7810      	ldrb	r0, [r2, #0]
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <eMBPoll+0x158>)
 80028d0:	6811      	ldr	r1, [r2, #0]
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <eMBPoll+0x154>)
 80028d4:	8812      	ldrh	r2, [r2, #0]
 80028d6:	4798      	blx	r3
 80028d8:	4603      	mov	r3, r0
 80028da:	70fb      	strb	r3, [r7, #3]
            }
            break;
 80028dc:	e001      	b.n	80028e2 <eMBPoll+0x13e>
            break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <eMBPoll+0x140>
            break;
 80028e2:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	20000158 	.word	0x20000158
 80028f8:	20000168 	.word	0x20000168
 80028fc:	20000164 	.word	0x20000164
 8002900:	20000160 	.word	0x20000160
 8002904:	2000014a 	.word	0x2000014a
 8002908:	2000016a 	.word	0x2000016a
 800290c:	2000016b 	.word	0x2000016b
 8002910:	20000010 	.word	0x20000010
 8002914:	2000014c 	.word	0x2000014c

08002918 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <xMBPortEventInit+0x14>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	2000016d 	.word	0x2000016d

08002930 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <xMBPortEventPost+0x24>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8002940:	4a05      	ldr	r2, [pc, #20]	; (8002958 <xMBPortEventPost+0x28>)
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	2000016d 	.word	0x2000016d
 8002958:	2000016c 	.word	0x2000016c

0800295c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <xMBPortEventGet+0x34>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <xMBPortEventGet+0x38>)
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <xMBPortEventGet+0x34>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	2000016d 	.word	0x2000016d
 8002994:	2000016c 	.word	0x2000016c

08002998 <vMBPortSerialEnable>:
void USART_MspInit(UART_HandleTypeDef* huart);
static void USART_SetConfig(UART_HandleTypeDef *huart);
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	460a      	mov	r2, r1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
    if(xRxEnable)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <vMBPortSerialEnable+0x28>
  {
    __HAL_UART_ENABLE_IT(&huart_m, UART_IT_RXNE);
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e007      	b.n	80029d0 <vMBPortSerialEnable+0x38>
  }
  else
  {
    __HAL_UART_DISABLE_IT(&huart_m, UART_IT_RXNE);
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0220 	bic.w	r2, r2, #32
 80029ce:	60da      	str	r2, [r3, #12]
  }

  if(xTxEnable)
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <vMBPortSerialEnable+0x50>
  {
    __HAL_UART_ENABLE_IT(&huart_m, UART_IT_TXE);
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    __HAL_UART_DISABLE_IT(&huart_m, UART_IT_TXE);
  }
}
 80029e6:	e007      	b.n	80029f8 <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huart_m, UART_IT_TXE);
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <vMBPortSerialEnable+0x6c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f6:	60da      	str	r2, [r3, #12]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	200001b4 	.word	0x200001b4

08002a08 <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6039      	str	r1, [r7, #0]
 8002a10:	4611      	mov	r1, r2
 8002a12:	461a      	mov	r2, r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	71bb      	strb	r3, [r7, #6]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	717b      	strb	r3, [r7, #5]
  switch (ucPORT)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d007      	beq.n	8002a36 <xMBPortSerialInit+0x2e>
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d009      	beq.n	8002a3e <xMBPortSerialInit+0x36>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <xMBPortSerialInit+0x3e>
  {
	case 0:
          huart_m.Instance = USART1;
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a30:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <xMBPortSerialInit+0xc0>)
 8002a32:	601a      	str	r2, [r3, #0]
          break;
 8002a34:	e009      	b.n	8002a4a <xMBPortSerialInit+0x42>
 	case 1:
          huart_m.Instance = USART2;
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <xMBPortSerialInit+0xc4>)
 8002a3a:	601a      	str	r2, [r3, #0]
          break;
 8002a3c:	e005      	b.n	8002a4a <xMBPortSerialInit+0x42>
	case 2:
          huart_m.Instance = USART3;
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a40:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <xMBPortSerialInit+0xc8>)
 8002a42:	601a      	str	r2, [r3, #0]
          break;
 8002a44:	e001      	b.n	8002a4a <xMBPortSerialInit+0x42>
        default:
          return FALSE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e038      	b.n	8002abc <xMBPortSerialInit+0xb4>
  }
  huart_m.Init.BaudRate = ulBaudRate;
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6053      	str	r3, [r2, #4]
  switch (ucDataBits)
 8002a50:	79bb      	ldrb	r3, [r7, #6]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d107      	bne.n	8002a66 <xMBPortSerialInit+0x5e>
  {
        case 8:
                huart_m.Init.WordLength = UART_WORDLENGTH_8B;
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
                break;
 8002a5c:	bf00      	nop
        default:
                return FALSE;
  }
  switch (eParity)
 8002a5e:	797b      	ldrb	r3, [r7, #5]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d00f      	beq.n	8002a84 <xMBPortSerialInit+0x7c>
 8002a64:	e001      	b.n	8002a6a <xMBPortSerialInit+0x62>
                return FALSE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e028      	b.n	8002abc <xMBPortSerialInit+0xb4>
  switch (eParity)
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d005      	beq.n	8002a7a <xMBPortSerialInit+0x72>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <xMBPortSerialInit+0x86>
  {
    case MB_PAR_NONE:
            huart_m.Init.Parity = UART_PARITY_NONE;
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
            break;
 8002a78:	e00b      	b.n	8002a92 <xMBPortSerialInit+0x8a>
    case MB_PAR_EVEN:
            huart_m.Init.Parity = UART_PARITY_EVEN;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	611a      	str	r2, [r3, #16]
            break;
 8002a82:	e006      	b.n	8002a92 <xMBPortSerialInit+0x8a>
    case MB_PAR_ODD:
            huart_m.Init.Parity = UART_PARITY_ODD;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002a8a:	611a      	str	r2, [r3, #16]
            break;
 8002a8c:	e001      	b.n	8002a92 <xMBPortSerialInit+0x8a>
    default:
            return FALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e014      	b.n	8002abc <xMBPortSerialInit+0xb4>
  }
  huart_m.Init.StopBits = UART_STOPBITS_1;
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
  huart_m.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
  huart_m.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  huart_m.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  return (HAL_OK == USART_Init(&huart_m));
 8002aaa:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <xMBPortSerialInit+0xbc>)
 8002aac:	f000 f858 	bl	8002b60 <USART_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2301      	moveq	r3, #1
 8002ab8:	2300      	movne	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200001b4 	.word	0x200001b4
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40004400 	.word	0x40004400
 8002ad0:	40004800 	.word	0x40004800

08002ad4 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
      huart_m.Instance->DR=ucByte;
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <xMBPortSerialPutByte+0x20>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	79fa      	ldrb	r2, [r7, #7]
 8002ae4:	605a      	str	r2, [r3, #4]
      return TRUE;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	200001b4 	.word	0x200001b4

08002af8 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(huart_m.Init.Parity == UART_PARITY_NONE)
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <xMBPortSerialGetByte+0x3c>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <xMBPortSerialGetByte+0x1e>
    {
        *pucByte = (uint8_t)(huart_m.Instance->DR & (uint8_t)0x00FF);
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <xMBPortSerialGetByte+0x3c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e008      	b.n	8002b28 <xMBPortSerialGetByte+0x30>
    }
    else
    {
        *pucByte = (uint8_t)(huart_m.Instance->DR & (uint8_t)0x007F);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <xMBPortSerialGetByte+0x3c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	701a      	strb	r2, [r3, #0]
    }
    return TRUE;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	200001b4 	.word	0x200001b4

08002b38 <prvvUARTTxReadyISR>:
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
void prvvUARTTxReadyISR( void )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
   pxMBFrameCBTransmitterEmpty(  );
 8002b3c:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <prvvUARTTxReadyISR+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4798      	blx	r3
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200001a0 	.word	0x200001a0

08002b4c <prvvUARTRxISR>:
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
void prvvUARTRxISR( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
    pxMBFrameCBByteReceived(  );
 8002b50:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <prvvUARTRxISR+0x10>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4798      	blx	r3
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200001a8 	.word	0x200001a8

08002b60 <USART_Init>:

HAL_StatusTypeDef USART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <USART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e03b      	b.n	8002bea <USART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->RxState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    USART_MspInit(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f834 	bl	8002bf4 <USART_MspInit>
  }

  huart->RxState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  USART_SetConfig(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f8d3 	bl	8002d50 <USART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->RxState= HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <USART_MspInit>:

void USART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <USART_MspInit+0x144>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12e      	bne.n	8002c64 <USART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c06:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <USART_MspInit+0x148>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	4a4c      	ldr	r2, [pc, #304]	; (8002d3c <USART_MspInit+0x148>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6193      	str	r3, [r2, #24]
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <USART_MspInit+0x148>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	f107 0318 	add.w	r3, r7, #24
 8002c30:	4619      	mov	r1, r3
 8002c32:	4843      	ldr	r0, [pc, #268]	; (8002d40 <USART_MspInit+0x14c>)
 8002c34:	f7fd fc54 	bl	80004e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0318 	add.w	r3, r7, #24
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	483c      	ldr	r0, [pc, #240]	; (8002d40 <USART_MspInit+0x14c>)
 8002c4e:	f7fd fc47 	bl	80004e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2025      	movs	r0, #37	; 0x25
 8002c58:	f7fd fc0b 	bl	8000472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c5c:	2025      	movs	r0, #37	; 0x25
 8002c5e:	f7fd fc24 	bl	80004aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c62:	e064      	b.n	8002d2e <USART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <USART_MspInit+0x150>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d12c      	bne.n	8002cc8 <USART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c6e:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <USART_MspInit+0x148>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4a32      	ldr	r2, [pc, #200]	; (8002d3c <USART_MspInit+0x148>)
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c78:	61d3      	str	r3, [r2, #28]
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <USART_MspInit+0x148>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c86:	2304      	movs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0318 	add.w	r3, r7, #24
 8002c96:	4619      	mov	r1, r3
 8002c98:	4829      	ldr	r0, [pc, #164]	; (8002d40 <USART_MspInit+0x14c>)
 8002c9a:	f7fd fc21 	bl	80004e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0318 	add.w	r3, r7, #24
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4823      	ldr	r0, [pc, #140]	; (8002d40 <USART_MspInit+0x14c>)
 8002cb2:	f7fd fc15 	bl	80004e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2026      	movs	r0, #38	; 0x26
 8002cbc:	f7fd fbd9 	bl	8000472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cc0:	2026      	movs	r0, #38	; 0x26
 8002cc2:	f7fd fbf2 	bl	80004aa <HAL_NVIC_EnableIRQ>
}
 8002cc6:	e032      	b.n	8002d2e <USART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <USART_MspInit+0x154>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12d      	bne.n	8002d2e <USART_MspInit+0x13a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <USART_MspInit+0x148>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <USART_MspInit+0x148>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	61d3      	str	r3, [r2, #28]
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <USART_MspInit+0x148>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	f107 0318 	add.w	r3, r7, #24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4813      	ldr	r0, [pc, #76]	; (8002d4c <USART_MspInit+0x158>)
 8002d00:	f7fd fbee 	bl	80004e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 0318 	add.w	r3, r7, #24
 8002d16:	4619      	mov	r1, r3
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <USART_MspInit+0x158>)
 8002d1a:	f7fd fbe1 	bl	80004e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2027      	movs	r0, #39	; 0x27
 8002d24:	f7fd fba5 	bl	8000472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d28:	2027      	movs	r0, #39	; 0x27
 8002d2a:	f7fd fbbe 	bl	80004aa <HAL_NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	; 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010800 	.word	0x40010800
 8002d44:	40004400 	.word	0x40004400
 8002d48:	40004800 	.word	0x40004800
 8002d4c:	40010c00 	.word	0x40010c00

08002d50 <USART_SetConfig>:

static void USART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg = 0x00;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d8e:	f023 030c 	bic.w	r3, r3, #12
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
             tmpreg);

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	615a      	str	r2, [r3, #20]

  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6f      	ldr	r2, [pc, #444]	; (8002f74 <USART_SetConfig+0x224>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d16b      	bne.n	8002e94 <USART_SetConfig+0x144>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002dbc:	f7fe f8a4 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009a      	lsls	r2, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <USART_SetConfig+0x228>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	011c      	lsls	r4, r3, #4
 8002de0:	f7fe f892 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009a      	lsls	r2, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dfa:	f7fe f885 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009a      	lsls	r2, r3, #2
 8002e08:	441a      	add	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <USART_SetConfig+0x228>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2264      	movs	r2, #100	; 0x64
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	1aeb      	subs	r3, r5, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a53      	ldr	r2, [pc, #332]	; (8002f78 <USART_SetConfig+0x228>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	441c      	add	r4, r3
 8002e36:	f7fe f867 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e50:	f7fe f85a 	bl	8000f08 <HAL_RCC_GetPCLK2Freq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009a      	lsls	r2, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4a43      	ldr	r2, [pc, #268]	; (8002f78 <USART_SetConfig+0x228>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2264      	movs	r2, #100	; 0x64
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	1aeb      	subs	r3, r5, r3
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	3332      	adds	r3, #50	; 0x32
 8002e7e:	4a3e      	ldr	r2, [pc, #248]	; (8002f78 <USART_SetConfig+0x228>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4422      	add	r2, r4
 8002e90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8002e92:	e06a      	b.n	8002f6a <USART_SetConfig+0x21a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e94:	f7fe f824 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009a      	lsls	r2, r3, #2
 8002ea2:	441a      	add	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <USART_SetConfig+0x228>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	011c      	lsls	r4, r3, #4
 8002eb8:	f7fe f812 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ed2:	f7fe f805 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <USART_SetConfig+0x228>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2264      	movs	r2, #100	; 0x64
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	1aeb      	subs	r3, r5, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <USART_SetConfig+0x228>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	441c      	add	r4, r3
 8002f0e:	f7fd ffe7 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f28:	f7fd ffda 	bl	8000ee0 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009a      	lsls	r2, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <USART_SetConfig+0x228>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2264      	movs	r2, #100	; 0x64
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	1aeb      	subs	r3, r5, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <USART_SetConfig+0x228>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4422      	add	r2, r4
 8002f68:	609a      	str	r2, [r3, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bdb0      	pop	{r4, r5, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40013800 	.word	0x40013800
 8002f78:	51eb851f 	.word	0x51eb851f

08002f7c <xMBPortTimersInit>:
uint16_t timeout = 0;
volatile uint16_t counter = 0;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  timeout = usTim1Timerout50us;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <xMBPortTimersInit+0x1c>)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	8013      	strh	r3, [r2, #0]
  return TRUE;
 8002f8c:	2301      	movs	r3, #1
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	2000016e 	.word	0x2000016e

08002f9c <vMBPortTimersEnable>:

void
vMBPortTimersEnable(  )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
    counter=0;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <vMBPortTimersEnable+0x14>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8002fa6:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <vMBPortTimersEnable+0x18>)
 8002fa8:	f7fe f80b 	bl	8000fc2 <HAL_TIM_Base_Start_IT>
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000170 	.word	0x20000170
 8002fb4:	200002f4 	.word	0x200002f4

08002fb8 <vMBPortTimersDisable>:

void
vMBPortTimersDisable(  )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim6);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <vMBPortTimersDisable+0x10>)
 8002fbe:	f7fe f823 	bl	8001008 <HAL_TIM_Base_Stop_IT>
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200002f4 	.word	0x200002f4

08002fcc <prvvTIMERExpiredISR>:
/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */
static void prvvTIMERExpiredISR( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
    ( void )pxMBPortCBTimerExpired(  );
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <prvvTIMERExpiredISR+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4798      	blx	r3
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200001a4 	.word	0x200001a4

08002fe0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if((++counter)>=timeout)
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	8011      	strh	r1, [r2, #0]
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d301      	bcc.n	8003004 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    prvvTIMERExpiredISR();
 8003000:	f7ff ffe4 	bl	8002fcc <prvvTIMERExpiredISR>
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000170 	.word	0x20000170
 8003010:	2000016e 	.word	0x2000016e

08003014 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8003020:	23ff      	movs	r3, #255	; 0xff
 8003022:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8003024:	23ff      	movs	r3, #255	; 0xff
 8003026:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8003028:	e013      	b.n	8003052 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	4053      	eors	r3, r2
 8003036:	b2db      	uxtb	r3, r3
 8003038:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800303a:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <usMBCRC16+0x64>)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4413      	add	r3, r2
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	4053      	eors	r3, r2
 8003046:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <usMBCRC16+0x68>)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	807a      	strh	r2, [r7, #2]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	b21a      	sxth	r2, r3
 8003062:	7bbb      	ldrb	r3, [r7, #14]
 8003064:	b21b      	sxth	r3, r3
 8003066:	4313      	orrs	r3, r2
 8003068:	b21b      	sxth	r3, r3
 800306a:	b29b      	uxth	r3, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	08004e84 	.word	0x08004e84
 800307c:	08004f84 	.word	0x08004f84

08003080 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	603a      	str	r2, [r7, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
 800308e:	460b      	mov	r3, r1
 8003090:	71bb      	strb	r3, [r7, #6]
 8003092:	4613      	mov	r3, r2
 8003094:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800309a:	f000 fadf 	bl	800365c <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800309e:	797b      	ldrb	r3, [r7, #5]
 80030a0:	79b8      	ldrb	r0, [r7, #6]
 80030a2:	2208      	movs	r2, #8
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	f7ff fcaf 	bl	8002a08 <xMBPortSerialInit>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d002      	beq.n	80030b6 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 80030b0:	2303      	movs	r3, #3
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e016      	b.n	80030e4 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80030bc:	d902      	bls.n	80030c4 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80030be:	2323      	movs	r3, #35	; 0x23
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	e005      	b.n	80030d0 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <eMBRTUInit+0x74>)
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff51 	bl	8002f7c <xMBPortTimersInit>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80030e0:	2303      	movs	r3, #3
 80030e2:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80030e4:	f000 fac8 	bl	8003678 <__critical_exit>

    return eStatus;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	00177fa0 	.word	0x00177fa0

080030f8 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80030fc:	f000 faae 	bl	800365c <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <eMBRTUStart+0x24>)
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8003106:	2100      	movs	r1, #0
 8003108:	2001      	movs	r0, #1
 800310a:	f7ff fc45 	bl	8002998 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800310e:	f7ff ff45 	bl	8002f9c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8003112:	f000 fab1 	bl	8003678 <__critical_exit>
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000173 	.word	0x20000173

08003120 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8003124:	f000 fa9a 	bl	800365c <__critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 8003128:	2100      	movs	r1, #0
 800312a:	2000      	movs	r0, #0
 800312c:	f7ff fc34 	bl	8002998 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8003130:	f7ff ff42 	bl	8002fb8 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8003134:	f000 faa0 	bl	8003678 <__critical_exit>
}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}

0800313c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8003150:	f000 fa84 	bl	800365c <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <eMBRTUReceive+0x84>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	2bff      	cmp	r3, #255	; 0xff
 800315c:	d905      	bls.n	800316a <eMBRTUReceive+0x2e>
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <eMBRTUReceive+0x88>)
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <eMBRTUReceive+0x8c>)
 8003162:	219d      	movs	r1, #157	; 0x9d
 8003164:	4819      	ldr	r0, [pc, #100]	; (80031cc <eMBRTUReceive+0x90>)
 8003166:	f000 fddb 	bl	8003d20 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <eMBRTUReceive+0x84>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d91b      	bls.n	80031ac <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <eMBRTUReceive+0x84>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	4619      	mov	r1, r3
 800317c:	4814      	ldr	r0, [pc, #80]	; (80031d0 <eMBRTUReceive+0x94>)
 800317e:	f7ff ff49 	bl	8003014 <usMBCRC16>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <eMBRTUReceive+0x94>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <eMBRTUReceive+0x84>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b03      	subs	r3, #3
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <eMBRTUReceive+0x98>)
 80031a4:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75bb      	strb	r3, [r7, #22]
 80031aa:	e001      	b.n	80031b0 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 80031ac:	2305      	movs	r3, #5
 80031ae:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 80031b0:	f000 fa62 	bl	8003678 <__critical_exit>
    return eStatus;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000017a 	.word	0x2000017a
 80031c4:	08004d40 	.word	0x08004d40
 80031c8:	08005084 	.word	0x08005084
 80031cc:	08004d68 	.word	0x08004d68
 80031d0:	200001f4 	.word	0x200001f4
 80031d4:	200001f5 	.word	0x200001f5

080031d8 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
 80031e4:	4613      	mov	r3, r2
 80031e6:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80031ec:	f000 fa36 	bl	800365c <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <eMBRTUSend+0xb4>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d13f      	bne.n	800327a <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	4a24      	ldr	r2, [pc, #144]	; (8003290 <eMBRTUSend+0xb8>)
 8003200:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <eMBRTUSend+0xbc>)
 8003204:	2201      	movs	r2, #1
 8003206:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <eMBRTUSend+0xb8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	79fa      	ldrb	r2, [r7, #7]
 800320e:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <eMBRTUSend+0xbc>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29a      	uxth	r2, r3
 8003216:	88bb      	ldrh	r3, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <eMBRTUSend+0xbc>)
 800321e:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <eMBRTUSend+0xb8>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <eMBRTUSend+0xbc>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7ff fef1 	bl	8003014 <usMBCRC16>
 8003232:	4603      	mov	r3, r0
 8003234:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <eMBRTUSend+0xbc>)
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	b291      	uxth	r1, r2
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <eMBRTUSend+0xbc>)
 8003242:	8011      	strh	r1, [r2, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	89bb      	ldrh	r3, [r7, #12]
 8003248:	b2d9      	uxtb	r1, r3
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <eMBRTUSend+0xc0>)
 800324c:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800324e:	89bb      	ldrh	r3, [r7, #12]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b299      	uxth	r1, r3
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <eMBRTUSend+0xbc>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	b290      	uxth	r0, r2
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <eMBRTUSend+0xbc>)
 8003260:	8010      	strh	r0, [r2, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	b2c9      	uxtb	r1, r1
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <eMBRTUSend+0xc0>)
 8003268:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <eMBRTUSend+0xc4>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8003270:	2101      	movs	r1, #1
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff fb90 	bl	8002998 <vMBPortSerialEnable>
 8003278:	e001      	b.n	800327e <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800327a:	2305      	movs	r3, #5
 800327c:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800327e:	f000 f9fb 	bl	8003678 <__critical_exit>
    return eStatus;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000173 	.word	0x20000173
 8003290:	20000174 	.word	0x20000174
 8003294:	20000178 	.word	0x20000178
 8003298:	200001f4 	.word	0x200001f4
 800329c:	20000172 	.word	0x20000172

080032a0 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <xMBRTUReceiveFSM+0xb4>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <xMBRTUReceiveFSM+0x20>
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <xMBRTUReceiveFSM+0xb8>)
 80032b6:	4a29      	ldr	r2, [pc, #164]	; (800335c <xMBRTUReceiveFSM+0xbc>)
 80032b8:	21e7      	movs	r1, #231	; 0xe7
 80032ba:	4829      	ldr	r0, [pc, #164]	; (8003360 <xMBRTUReceiveFSM+0xc0>)
 80032bc:	f000 fd30 	bl	8003d20 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80032c0:	1dbb      	adds	r3, r7, #6
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fc18 	bl	8002af8 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80032c8:	4b26      	ldr	r3, [pc, #152]	; (8003364 <xMBRTUReceiveFSM+0xc4>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d83b      	bhi.n	800334a <xMBRTUReceiveFSM+0xaa>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <xMBRTUReceiveFSM+0x38>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032f5 	.word	0x080032f5
 80032e0:	0800331d 	.word	0x0800331d
 80032e4:	080032ef 	.word	0x080032ef
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80032e8:	f7ff fe58 	bl	8002f9c <vMBPortTimersEnable>
        break;
 80032ec:	e02d      	b.n	800334a <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80032ee:	f7ff fe55 	bl	8002f9c <vMBPortTimersEnable>
        break;
 80032f2:	e02a      	b.n	800334a <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <xMBRTUReceiveFSM+0xc8>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <xMBRTUReceiveFSM+0xc8>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	b291      	uxth	r1, r2
 8003304:	4a18      	ldr	r2, [pc, #96]	; (8003368 <xMBRTUReceiveFSM+0xc8>)
 8003306:	8011      	strh	r1, [r2, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	79b9      	ldrb	r1, [r7, #6]
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <xMBRTUReceiveFSM+0xcc>)
 800330e:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <xMBRTUReceiveFSM+0xc4>)
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8003316:	f7ff fe41 	bl	8002f9c <vMBPortTimersEnable>
        break;
 800331a:	e016      	b.n	800334a <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <xMBRTUReceiveFSM+0xc8>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	2bff      	cmp	r3, #255	; 0xff
 8003324:	d80b      	bhi.n	800333e <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <xMBRTUReceiveFSM+0xc8>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	b291      	uxth	r1, r2
 8003330:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <xMBRTUReceiveFSM+0xc8>)
 8003332:	8011      	strh	r1, [r2, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	79b9      	ldrb	r1, [r7, #6]
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <xMBRTUReceiveFSM+0xcc>)
 800333a:	5499      	strb	r1, [r3, r2]
 800333c:	e002      	b.n	8003344 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <xMBRTUReceiveFSM+0xc4>)
 8003340:	2203      	movs	r2, #3
 8003342:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8003344:	f7ff fe2a 	bl	8002f9c <vMBPortTimersEnable>
        break;
 8003348:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800334a:	79fb      	ldrb	r3, [r7, #7]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000172 	.word	0x20000172
 8003358:	08004d88 	.word	0x08004d88
 800335c:	08005094 	.word	0x08005094
 8003360:	08004d68 	.word	0x08004d68
 8003364:	20000173 	.word	0x20000173
 8003368:	2000017a 	.word	0x2000017a
 800336c:	200001f4 	.word	0x200001f4

08003370 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003376:	2300      	movs	r3, #0
 8003378:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <xMBRTUTransmitFSM+0x94>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d006      	beq.n	8003392 <xMBRTUTransmitFSM+0x22>
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <xMBRTUTransmitFSM+0x98>)
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <xMBRTUTransmitFSM+0x9c>)
 8003388:	f44f 7191 	mov.w	r1, #290	; 0x122
 800338c:	4820      	ldr	r0, [pc, #128]	; (8003410 <xMBRTUTransmitFSM+0xa0>)
 800338e:	f000 fcc7 	bl	8003d20 <__assert_func>

    switch ( eSndState )
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <xMBRTUTransmitFSM+0xa4>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <xMBRTUTransmitFSM+0x32>
 800339c:	2b01      	cmp	r3, #1
 800339e:	d005      	beq.n	80033ac <xMBRTUTransmitFSM+0x3c>
 80033a0:	e02a      	b.n	80033f8 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80033a2:	2100      	movs	r1, #0
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7ff faf7 	bl	8002998 <vMBPortSerialEnable>
        break;
 80033aa:	e025      	b.n	80033f8 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <xMBRTUTransmitFSM+0xa8>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d013      	beq.n	80033de <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <xMBRTUTransmitFSM+0xac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fb88 	bl	8002ad4 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <xMBRTUTransmitFSM+0xac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	4a14      	ldr	r2, [pc, #80]	; (800341c <xMBRTUTransmitFSM+0xac>)
 80033cc:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <xMBRTUTransmitFSM+0xa8>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <xMBRTUTransmitFSM+0xa8>)
 80033da:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80033dc:	e00b      	b.n	80033f6 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80033de:	2003      	movs	r0, #3
 80033e0:	f7ff faa6 	bl	8002930 <xMBPortEventPost>
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80033e8:	2100      	movs	r1, #0
 80033ea:	2001      	movs	r0, #1
 80033ec:	f7ff fad4 	bl	8002998 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <xMBRTUTransmitFSM+0xa4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
        break;
 80033f6:	bf00      	nop
    }

    return xNeedPoll;
 80033f8:	79fb      	ldrb	r3, [r7, #7]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000173 	.word	0x20000173
 8003408:	08004da4 	.word	0x08004da4
 800340c:	080050a8 	.word	0x080050a8
 8003410:	08004d68 	.word	0x08004d68
 8003414:	20000172 	.word	0x20000172
 8003418:	20000178 	.word	0x20000178
 800341c:	20000174 	.word	0x20000174

08003420 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <xMBRTUTimerT35Expired+0x78>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d009      	beq.n	8003448 <xMBRTUTimerT35Expired+0x28>
 8003434:	2b03      	cmp	r3, #3
 8003436:	d023      	beq.n	8003480 <xMBRTUTimerT35Expired+0x60>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <xMBRTUTimerT35Expired+0x34>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff fa77 	bl	8002930 <xMBPortEventPost>
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
        break;
 8003446:	e01c      	b.n	8003482 <xMBRTUTimerT35Expired+0x62>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003448:	2001      	movs	r0, #1
 800344a:	f7ff fa71 	bl	8002930 <xMBPortEventPost>
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
        break;
 8003452:	e016      	b.n	8003482 <xMBRTUTimerT35Expired+0x62>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <xMBRTUTimerT35Expired+0x78>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <xMBRTUTimerT35Expired+0x62>
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <xMBRTUTimerT35Expired+0x78>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00c      	beq.n	8003482 <xMBRTUTimerT35Expired+0x62>
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <xMBRTUTimerT35Expired+0x78>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d007      	beq.n	8003482 <xMBRTUTimerT35Expired+0x62>
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <xMBRTUTimerT35Expired+0x7c>)
 8003474:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <xMBRTUTimerT35Expired+0x80>)
 8003476:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800347a:	480a      	ldr	r0, [pc, #40]	; (80034a4 <xMBRTUTimerT35Expired+0x84>)
 800347c:	f000 fc50 	bl	8003d20 <__assert_func>
        break;
 8003480:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003482:	f7ff fd99 	bl	8002fb8 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <xMBRTUTimerT35Expired+0x78>)
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800348c:	79fb      	ldrb	r3, [r7, #7]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000173 	.word	0x20000173
 800349c:	08004dc0 	.word	0x08004dc0
 80034a0:	080050bc 	.word	0x080050bc
 80034a4:	08004d68 	.word	0x08004d68

080034a8 <eMBRegInputCB>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c2:	d329      	bcc.n	8003518 <eMBRegInputCB+0x70>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 80034c4:	887a      	ldrh	r2, [r7, #2]
 80034c6:	883b      	ldrh	r3, [r7, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 80034ce:	dc23      	bgt.n	8003518 <eMBRegInputCB+0x70>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <eMBRegInputCB+0x80>)
 80034d4:	8812      	ldrh	r2, [r2, #0]
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 80034da:	e019      	b.n	8003510 <eMBRegInputCB+0x68>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <eMBRegInputCB+0x84>)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 80034ee:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 80034f0:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 80034f2:	4a0e      	ldr	r2, [pc, #56]	; (800352c <eMBRegInputCB+0x84>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
            *pucRegBuffer++ =
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8003500:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8003502:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3301      	adds	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 800350a:	883b      	ldrh	r3, [r7, #0]
 800350c:	3b01      	subs	r3, #1
 800350e:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 8003510:	883b      	ldrh	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e2      	bne.n	80034dc <eMBRegInputCB+0x34>
    if( ( usAddress >= REG_INPUT_START )
 8003516:	e001      	b.n	800351c <eMBRegInputCB+0x74>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000090 	.word	0x20000090
 800352c:	2000017c 	.word	0x2000017c

08003530 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003554:	d353      	bcc.n	80035fe <eMBRegHoldingCB+0xce>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 8003556:	897a      	ldrh	r2, [r7, #10]
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	4413      	add	r3, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 800355c:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8003560:	dc4d      	bgt.n	80035fe <eMBRegHoldingCB+0xce>
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <eMBRegHoldingCB+0xe0>)
 8003566:	8812      	ldrh	r2, [r2, #0]
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        switch ( eMode )
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01c      	beq.n	80035ac <eMBRegHoldingCB+0x7c>
 8003572:	2b01      	cmp	r3, #1
 8003574:	d03e      	beq.n	80035f4 <eMBRegHoldingCB+0xc4>
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
                iRegIndex++;
                usNRegs--;
            }
        }
    }
 8003576:	e044      	b.n	8003602 <eMBRegHoldingCB+0xd2>
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <eMBRegHoldingCB+0xe4>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	b299      	uxth	r1, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	60fa      	str	r2, [r7, #12]
 800358a:	b2ca      	uxtb	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <eMBRegHoldingCB+0xe4>)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	60fa      	str	r2, [r7, #12]
 800359c:	b2ca      	uxtb	r2, r1
 800359e:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3301      	adds	r3, #1
 80035a4:	613b      	str	r3, [r7, #16]
                usNRegs--;
 80035a6:	893b      	ldrh	r3, [r7, #8]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e2      	bne.n	8003578 <eMBRegHoldingCB+0x48>
            break;
 80035b2:	e023      	b.n	80035fc <eMBRegHoldingCB+0xcc>
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60fa      	str	r2, [r7, #12]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	b299      	uxth	r1, r3
 80035c2:	4a14      	ldr	r2, [pc, #80]	; (8003614 <eMBRegHoldingCB+0xe4>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	60fa      	str	r2, [r7, #12]
 80035d0:	7819      	ldrb	r1, [r3, #0]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <eMBRegHoldingCB+0xe4>)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80035da:	b28b      	uxth	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	b299      	uxth	r1, r3
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <eMBRegHoldingCB+0xe4>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3301      	adds	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
                usNRegs--;
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1dc      	bne.n	80035b4 <eMBRegHoldingCB+0x84>
    }
 80035fa:	e002      	b.n	8003602 <eMBRegHoldingCB+0xd2>
 80035fc:	e001      	b.n	8003602 <eMBRegHoldingCB+0xd2>
    else
    {
        eStatus = MB_ENOREG;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8003602:	7dfb      	ldrb	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000092 	.word	0x20000092
 8003614:	20000184 	.word	0x20000184

08003618 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	461a      	mov	r2, r3
 8003626:	4603      	mov	r3, r0
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	460b      	mov	r3, r1
 800362c:	813b      	strh	r3, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 8003632:	2301      	movs	r3, #1
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	807b      	strh	r3, [r7, #2]
 800364a:	4613      	mov	r3, r2
 800364c:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 800364e:	2301      	movs	r3, #1
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <__critical_enter>:


static uint32_t lock_nesting_count = 0;
void __critical_enter(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003660:	b672      	cpsid	i
    __disable_irq();
    ++lock_nesting_count;
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__critical_enter+0x18>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a02      	ldr	r2, [pc, #8]	; (8003674 <__critical_enter+0x18>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	2000018c 	.word	0x2000018c

08003678 <__critical_exit>:
void __critical_exit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
    /* Unlock interrupts only when we are exiting the outermost nested call. */
    --lock_nesting_count;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <__critical_exit+0x20>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <__critical_exit+0x20>)
 8003684:	6013      	str	r3, [r2, #0]
    if (lock_nesting_count == 0) {
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <__critical_exit+0x20>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <__critical_exit+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 800368e:	b662      	cpsie	i
        __enable_irq();
    }
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	2000018c 	.word	0x2000018c

0800369c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a2:	f7fc fdb5 	bl	8000210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036a6:	f000 f821 	bl	80036ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036aa:	f000 f8bf 	bl	800382c <MX_GPIO_Init>
  MX_TIM6_Init();
 80036ae:	f000 f85f 	bl	8003770 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80036b2:	f000 f891 	bl	80037d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	  eMBErrorCode    eStatus;
      eStatus = eMBInit( MB_RTU, 0x0A, 1, 9600, MB_PAR_NONE );
 80036b6:	2300      	movs	r3, #0
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80036be:	2201      	movs	r2, #1
 80036c0:	210a      	movs	r1, #10
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7fe ffa2 	bl	800260c <eMBInit>
 80036c8:	4603      	mov	r3, r0
 80036ca:	71fb      	strb	r3, [r7, #7]

      /* Enable the Modbus Protocol Stack. */
      eStatus = eMBEnable(  );
 80036cc:	f7ff f84e 	bl	800276c <eMBEnable>
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ( void )eMBPoll(  );
 80036d4:	f7ff f866 	bl	80027a4 <eMBPoll>

	 /* Here we simply count the number of poll cycles. */
	    usRegInputBuf[1]++;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <main+0x4c>)
 80036da:	885b      	ldrh	r3, [r3, #2]
 80036dc:	3301      	adds	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <main+0x4c>)
 80036e2:	805a      	strh	r2, [r3, #2]
	  ( void )eMBPoll(  );
 80036e4:	e7f6      	b.n	80036d4 <main+0x38>
 80036e6:	bf00      	nop
 80036e8:	2000017c 	.word	0x2000017c

080036ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b090      	sub	sp, #64	; 0x40
 80036f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036f2:	f107 0318 	add.w	r3, r7, #24
 80036f6:	2228      	movs	r2, #40	; 0x28
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fb75 	bl	8003dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003700:	1d3b      	adds	r3, r7, #4
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800370e:	2301      	movs	r3, #1
 8003710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371c:	2302      	movs	r3, #2
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8003726:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800372c:	f107 0318 	add.w	r3, r7, #24
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd f82f 	bl	8000794 <HAL_RCC_OscConfig>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800373c:	f000 f8a4 	bl	8003888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003740:	230f      	movs	r3, #15
 8003742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003744:	2302      	movs	r3, #2
 8003746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fa9b 	bl	8000c94 <HAL_RCC_ClockConfig>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003764:	f000 f890 	bl	8003888 <Error_Handler>
  }
}
 8003768:	bf00      	nop
 800376a:	3740      	adds	r7, #64	; 0x40
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003776:	463b      	mov	r3, r7
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <MX_TIM6_Init+0x60>)
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003782:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <MX_TIM6_Init+0x60>)
 8003786:	2217      	movs	r2, #23
 8003788:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <MX_TIM6_Init+0x60>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <MX_TIM6_Init+0x60>)
 8003792:	2231      	movs	r2, #49	; 0x31
 8003794:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <MX_TIM6_Init+0x60>)
 8003798:	2200      	movs	r2, #0
 800379a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800379c:	480c      	ldr	r0, [pc, #48]	; (80037d0 <MX_TIM6_Init+0x60>)
 800379e:	f7fd fbe5 	bl	8000f6c <HAL_TIM_Base_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80037a8:	f000 f86e 	bl	8003888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037b4:	463b      	mov	r3, r7
 80037b6:	4619      	mov	r1, r3
 80037b8:	4805      	ldr	r0, [pc, #20]	; (80037d0 <MX_TIM6_Init+0x60>)
 80037ba:	f7fd fdfb 	bl	80013b4 <HAL_TIMEx_MasterConfigSynchronization>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80037c4:	f000 f860 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200002f4 	.word	0x200002f4
 80037d4:	40001000 	.word	0x40001000

080037d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <MX_USART2_UART_Init+0x50>)
 80037e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 80037e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 80037fe:	220c      	movs	r2, #12
 8003800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 8003804:	2200      	movs	r2, #0
 8003806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_USART2_UART_Init+0x4c>)
 8003810:	f7fd fe26 	bl	8001460 <HAL_UART_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800381a:	f000 f835 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000334 	.word	0x20000334
 8003828:	40004400 	.word	0x40004400

0800382c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_GPIO_Init+0x58>)
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <MX_GPIO_Init+0x58>)
 8003838:	f043 0310 	orr.w	r3, r3, #16
 800383c:	6193      	str	r3, [r2, #24]
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_GPIO_Init+0x58>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_GPIO_Init+0x58>)
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <MX_GPIO_Init+0x58>)
 8003850:	f043 0320 	orr.w	r3, r3, #32
 8003854:	6193      	str	r3, [r2, #24]
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <MX_GPIO_Init+0x58>)
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <MX_GPIO_Init+0x58>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <MX_GPIO_Init+0x58>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6193      	str	r3, [r2, #24]
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <MX_GPIO_Init+0x58>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]

}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40021000 	.word	0x40021000

08003888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_MspInit+0x5c>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_MspInit+0x5c>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6193      	str	r3, [r2, #24]
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_MspInit+0x5c>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_MspInit+0x5c>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_MspInit+0x5c>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	61d3      	str	r3, [r2, #28]
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_MspInit+0x5c>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_MspInit+0x60>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_MspInit+0x60>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40010000 	.word	0x40010000

080038f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0d      	ldr	r2, [pc, #52]	; (800393c <HAL_TIM_Base_MspInit+0x44>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <HAL_TIM_Base_MspInit+0x48>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <HAL_TIM_Base_MspInit+0x48>)
 8003910:	f043 0310 	orr.w	r3, r3, #16
 8003914:	61d3      	str	r3, [r2, #28]
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_TIM_Base_MspInit+0x48>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	2036      	movs	r0, #54	; 0x36
 8003928:	f7fc fda3 	bl	8000472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800392c:	2036      	movs	r0, #54	; 0x36
 800392e:	f7fc fdbc 	bl	80004aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40001000 	.word	0x40001000
 8003940:	40021000 	.word	0x40021000

08003944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <HAL_UART_MspInit+0x88>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d12f      	bne.n	80039c4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_UART_MspInit+0x8c>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_UART_MspInit+0x8c>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396e:	61d3      	str	r3, [r2, #28]
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_UART_MspInit+0x8c>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <HAL_UART_MspInit+0x8c>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_UART_MspInit+0x8c>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	6193      	str	r3, [r2, #24]
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_UART_MspInit+0x8c>)
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003994:	2304      	movs	r3, #4
 8003996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	480b      	ldr	r0, [pc, #44]	; (80039d4 <HAL_UART_MspInit+0x90>)
 80039a8:	f7fc fd9a 	bl	80004e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039ac:	2308      	movs	r3, #8
 80039ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	4619      	mov	r1, r3
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <HAL_UART_MspInit+0x90>)
 80039c0:	f7fc fd8e 	bl	80004e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039c4:	bf00      	nop
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40004400 	.word	0x40004400
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40010800 	.word	0x40010800

080039d8 <DINAR_UART_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DINAR_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	60fb      	str	r3, [r7, #12]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	60bb      	str	r3, [r7, #8]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <DINAR_UART_IRQHandler+0x42>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <DINAR_UART_IRQHandler+0x42>
  {
    prvvUARTRxISR(  );
 8003a16:	f7ff f899 	bl	8002b4c <prvvUARTRxISR>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a24:	2b80      	cmp	r3, #128	; 0x80
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	60bb      	str	r3, [r7, #8]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <DINAR_UART_IRQHandler+0x74>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <DINAR_UART_IRQHandler+0x74>
  {
    prvvUARTTxReadyISR(  );
 8003a48:	f7ff f876 	bl	8002b38 <prvvUARTTxReadyISR>
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  DINAR_UART_IRQHandler(&huart_m);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <USART1_IRQHandler+0x10>)
 8003a5a:	f7ff ffbd 	bl	80039d8 <DINAR_UART_IRQHandler>
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200001b4 	.word	0x200001b4

08003a68 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  DINAR_UART_IRQHandler(&huart_m);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <USART2_IRQHandler+0x10>)
 8003a6e:	f7ff ffb3 	bl	80039d8 <DINAR_UART_IRQHandler>
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200001b4 	.word	0x200001b4

08003a7c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  DINAR_UART_IRQHandler(&huart_m);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <USART3_IRQHandler+0x10>)
 8003a82:	f7ff ffa9 	bl	80039d8 <DINAR_UART_IRQHandler>
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200001b4 	.word	0x200001b4

08003a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <HardFault_Handler+0x4>

08003aa2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa6:	e7fe      	b.n	8003aa6 <MemManage_Handler+0x4>

08003aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aac:	e7fe      	b.n	8003aac <BusFault_Handler+0x4>

08003aae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ab2:	e7fe      	b.n	8003ab2 <UsageFault_Handler+0x4>

08003ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003adc:	f7fc fbd6 	bl	800028c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <TIM6_DAC_IRQHandler+0x10>)
 8003aea:	f7fd fab7 	bl	800105c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200002f4 	.word	0x200002f4

08003af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	return 1;
 8003afc:	2301      	movs	r3, #1
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <_kill>:

int _kill(int pid, int sig)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b10:	f000 f924 	bl	8003d5c <__errno>
 8003b14:	4602      	mov	r2, r0
 8003b16:	2316      	movs	r3, #22
 8003b18:	6013      	str	r3, [r2, #0]
	return -1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_exit>:

void _exit (int status)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ffe7 	bl	8003b06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b38:	e7fe      	b.n	8003b38 <_exit+0x12>

08003b3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e00a      	b.n	8003b62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b4c:	f3af 8000 	nop.w
 8003b50:	4601      	mov	r1, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	60ba      	str	r2, [r7, #8]
 8003b58:	b2ca      	uxtb	r2, r1
 8003b5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	dbf0      	blt.n	8003b4c <_read+0x12>
	}

return len;
 8003b6a:	687b      	ldr	r3, [r7, #4]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e009      	b.n	8003b9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	60ba      	str	r2, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	dbf1      	blt.n	8003b86 <_write+0x12>
	}
	return len;
 8003ba2:	687b      	ldr	r3, [r7, #4]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_close>:

int _close(int file)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	return -1;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <_isatty>:

int _isatty(int file)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	return 1;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
	return 0;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_sbrk+0x50>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x16>
		heap_end = &end;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <_sbrk+0x50>)
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <_sbrk+0x54>)
 8003c20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <_sbrk+0x50>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <_sbrk+0x50>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	466a      	mov	r2, sp
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d907      	bls.n	8003c46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c36:	f000 f891 	bl	8003d5c <__errno>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	e006      	b.n	8003c54 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <_sbrk+0x50>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <_sbrk+0x50>)
 8003c50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000190 	.word	0x20000190
 8003c60:	20000378 	.word	0x20000378

08003c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <SystemInit+0x64>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <SystemInit+0x64>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <SystemInit+0x64>)
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4913      	ldr	r1, [pc, #76]	; (8003cc8 <SystemInit+0x64>)
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <SystemInit+0x68>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <SystemInit+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a10      	ldr	r2, [pc, #64]	; (8003cc8 <SystemInit+0x64>)
 8003c86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <SystemInit+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <SystemInit+0x64>)
 8003c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <SystemInit+0x64>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <SystemInit+0x64>)
 8003ca2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003ca6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <SystemInit+0x64>)
 8003caa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003cae:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <SystemInit+0x64>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <SystemInit+0x6c>)
 8003cb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cbc:	609a      	str	r2, [r3, #8]
#endif 
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	f8ff0000 	.word	0xf8ff0000
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003cd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003cd6:	e003      	b.n	8003ce0 <LoopCopyDataInit>

08003cd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003cda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003cdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003cde:	3104      	adds	r1, #4

08003ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003ce0:	480a      	ldr	r0, [pc, #40]	; (8003d0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ce4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003ce6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003ce8:	d3f6      	bcc.n	8003cd8 <CopyDataInit>
  ldr r2, =_sbss
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003cec:	e002      	b.n	8003cf4 <LoopFillZerobss>

08003cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003cf0:	f842 3b04 	str.w	r3, [r2], #4

08003cf4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003cf6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003cf8:	d3f9      	bcc.n	8003cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cfa:	f7ff ffb3 	bl	8003c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfe:	f000 f845 	bl	8003d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d02:	f7ff fccb 	bl	800369c <main>
  bx lr
 8003d06:	4770      	bx	lr
  ldr r3, =_sidata
 8003d08:	080051c8 	.word	0x080051c8
  ldr r0, =_sdata
 8003d0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d10:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 8003d14:	200000fc 	.word	0x200000fc
  ldr r3, = _ebss
 8003d18:	20000378 	.word	0x20000378

08003d1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC1_IRQHandler>
	...

08003d20 <__assert_func>:
 8003d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d22:	461c      	mov	r4, r3
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <__assert_func+0x2c>)
 8003d26:	4605      	mov	r5, r0
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68d8      	ldr	r0, [r3, #12]
 8003d2c:	b152      	cbz	r2, 8003d44 <__assert_func+0x24>
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <__assert_func+0x30>)
 8003d30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d34:	9100      	str	r1, [sp, #0]
 8003d36:	462b      	mov	r3, r5
 8003d38:	4622      	mov	r2, r4
 8003d3a:	4906      	ldr	r1, [pc, #24]	; (8003d54 <__assert_func+0x34>)
 8003d3c:	f000 f814 	bl	8003d68 <fiprintf>
 8003d40:	f000 fbe0 	bl	8004504 <abort>
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__assert_func+0x38>)
 8003d46:	461a      	mov	r2, r3
 8003d48:	e7f2      	b.n	8003d30 <__assert_func+0x10>
 8003d4a:	bf00      	nop
 8003d4c:	20000098 	.word	0x20000098
 8003d50:	080050ec 	.word	0x080050ec
 8003d54:	080050f9 	.word	0x080050f9
 8003d58:	08005127 	.word	0x08005127

08003d5c <__errno>:
 8003d5c:	4b01      	ldr	r3, [pc, #4]	; (8003d64 <__errno+0x8>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000098 	.word	0x20000098

08003d68 <fiprintf>:
 8003d68:	b40e      	push	{r1, r2, r3}
 8003d6a:	b503      	push	{r0, r1, lr}
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	ab03      	add	r3, sp, #12
 8003d70:	4805      	ldr	r0, [pc, #20]	; (8003d88 <fiprintf+0x20>)
 8003d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d76:	6800      	ldr	r0, [r0, #0]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	f000 f865 	bl	8003e48 <_vfiprintf_r>
 8003d7e:	b002      	add	sp, #8
 8003d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d84:	b003      	add	sp, #12
 8003d86:	4770      	bx	lr
 8003d88:	20000098 	.word	0x20000098

08003d8c <__libc_init_array>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	2500      	movs	r5, #0
 8003d90:	4e0c      	ldr	r6, [pc, #48]	; (8003dc4 <__libc_init_array+0x38>)
 8003d92:	4c0d      	ldr	r4, [pc, #52]	; (8003dc8 <__libc_init_array+0x3c>)
 8003d94:	1ba4      	subs	r4, r4, r6
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	42a5      	cmp	r5, r4
 8003d9a:	d109      	bne.n	8003db0 <__libc_init_array+0x24>
 8003d9c:	f000 ff4e 	bl	8004c3c <_init>
 8003da0:	2500      	movs	r5, #0
 8003da2:	4e0a      	ldr	r6, [pc, #40]	; (8003dcc <__libc_init_array+0x40>)
 8003da4:	4c0a      	ldr	r4, [pc, #40]	; (8003dd0 <__libc_init_array+0x44>)
 8003da6:	1ba4      	subs	r4, r4, r6
 8003da8:	10a4      	asrs	r4, r4, #2
 8003daa:	42a5      	cmp	r5, r4
 8003dac:	d105      	bne.n	8003dba <__libc_init_array+0x2e>
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003db4:	4798      	blx	r3
 8003db6:	3501      	adds	r5, #1
 8003db8:	e7ee      	b.n	8003d98 <__libc_init_array+0xc>
 8003dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dbe:	4798      	blx	r3
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	e7f2      	b.n	8003daa <__libc_init_array+0x1e>
 8003dc4:	080051c0 	.word	0x080051c0
 8003dc8:	080051c0 	.word	0x080051c0
 8003dcc:	080051c0 	.word	0x080051c0
 8003dd0:	080051c4 	.word	0x080051c4

08003dd4 <memcpy>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	1e43      	subs	r3, r0, #1
 8003dd8:	440a      	add	r2, r1
 8003dda:	4291      	cmp	r1, r2
 8003ddc:	d100      	bne.n	8003de0 <memcpy+0xc>
 8003dde:	bd10      	pop	{r4, pc}
 8003de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de8:	e7f7      	b.n	8003dda <memcpy+0x6>

08003dea <memset>:
 8003dea:	4603      	mov	r3, r0
 8003dec:	4402      	add	r2, r0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d100      	bne.n	8003df4 <memset+0xa>
 8003df2:	4770      	bx	lr
 8003df4:	f803 1b01 	strb.w	r1, [r3], #1
 8003df8:	e7f9      	b.n	8003dee <memset+0x4>

08003dfa <__sfputc_r>:
 8003dfa:	6893      	ldr	r3, [r2, #8]
 8003dfc:	b410      	push	{r4}
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	da07      	bge.n	8003e16 <__sfputc_r+0x1c>
 8003e06:	6994      	ldr	r4, [r2, #24]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	db01      	blt.n	8003e10 <__sfputc_r+0x16>
 8003e0c:	290a      	cmp	r1, #10
 8003e0e:	d102      	bne.n	8003e16 <__sfputc_r+0x1c>
 8003e10:	bc10      	pop	{r4}
 8003e12:	f000 bab7 	b.w	8004384 <__swbuf_r>
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	1c58      	adds	r0, r3, #1
 8003e1a:	6010      	str	r0, [r2, #0]
 8003e1c:	7019      	strb	r1, [r3, #0]
 8003e1e:	4608      	mov	r0, r1
 8003e20:	bc10      	pop	{r4}
 8003e22:	4770      	bx	lr

08003e24 <__sfputs_r>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	4606      	mov	r6, r0
 8003e28:	460f      	mov	r7, r1
 8003e2a:	4614      	mov	r4, r2
 8003e2c:	18d5      	adds	r5, r2, r3
 8003e2e:	42ac      	cmp	r4, r5
 8003e30:	d101      	bne.n	8003e36 <__sfputs_r+0x12>
 8003e32:	2000      	movs	r0, #0
 8003e34:	e007      	b.n	8003e46 <__sfputs_r+0x22>
 8003e36:	463a      	mov	r2, r7
 8003e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f7ff ffdc 	bl	8003dfa <__sfputc_r>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	d1f3      	bne.n	8003e2e <__sfputs_r+0xa>
 8003e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e48 <_vfiprintf_r>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	b09d      	sub	sp, #116	; 0x74
 8003e50:	4617      	mov	r7, r2
 8003e52:	461d      	mov	r5, r3
 8003e54:	4606      	mov	r6, r0
 8003e56:	b118      	cbz	r0, 8003e60 <_vfiprintf_r+0x18>
 8003e58:	6983      	ldr	r3, [r0, #24]
 8003e5a:	b90b      	cbnz	r3, 8003e60 <_vfiprintf_r+0x18>
 8003e5c:	f000 fc4a 	bl	80046f4 <__sinit>
 8003e60:	4b7c      	ldr	r3, [pc, #496]	; (8004054 <_vfiprintf_r+0x20c>)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d158      	bne.n	8003f18 <_vfiprintf_r+0xd0>
 8003e66:	6874      	ldr	r4, [r6, #4]
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	0718      	lsls	r0, r3, #28
 8003e6c:	d55e      	bpl.n	8003f2c <_vfiprintf_r+0xe4>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05b      	beq.n	8003f2c <_vfiprintf_r+0xe4>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9309      	str	r3, [sp, #36]	; 0x24
 8003e78:	2320      	movs	r3, #32
 8003e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e7e:	2330      	movs	r3, #48	; 0x30
 8003e80:	f04f 0b01 	mov.w	fp, #1
 8003e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e88:	9503      	str	r5, [sp, #12]
 8003e8a:	46b8      	mov	r8, r7
 8003e8c:	4645      	mov	r5, r8
 8003e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e92:	b10b      	cbz	r3, 8003e98 <_vfiprintf_r+0x50>
 8003e94:	2b25      	cmp	r3, #37	; 0x25
 8003e96:	d154      	bne.n	8003f42 <_vfiprintf_r+0xfa>
 8003e98:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e9c:	d00b      	beq.n	8003eb6 <_vfiprintf_r+0x6e>
 8003e9e:	4653      	mov	r3, sl
 8003ea0:	463a      	mov	r2, r7
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f7ff ffbd 	bl	8003e24 <__sfputs_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f000 80c2 	beq.w	8004034 <_vfiprintf_r+0x1ec>
 8003eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb2:	4453      	add	r3, sl
 8003eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb6:	f898 3000 	ldrb.w	r3, [r8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80ba 	beq.w	8004034 <_vfiprintf_r+0x1ec>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	9307      	str	r3, [sp, #28]
 8003ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed4:	46a8      	mov	r8, r5
 8003ed6:	2205      	movs	r2, #5
 8003ed8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003edc:	485e      	ldr	r0, [pc, #376]	; (8004058 <_vfiprintf_r+0x210>)
 8003ede:	f000 fcf7 	bl	80048d0 <memchr>
 8003ee2:	9b04      	ldr	r3, [sp, #16]
 8003ee4:	bb78      	cbnz	r0, 8003f46 <_vfiprintf_r+0xfe>
 8003ee6:	06d9      	lsls	r1, r3, #27
 8003ee8:	bf44      	itt	mi
 8003eea:	2220      	movmi	r2, #32
 8003eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ef0:	071a      	lsls	r2, r3, #28
 8003ef2:	bf44      	itt	mi
 8003ef4:	222b      	movmi	r2, #43	; 0x2b
 8003ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003efa:	782a      	ldrb	r2, [r5, #0]
 8003efc:	2a2a      	cmp	r2, #42	; 0x2a
 8003efe:	d02a      	beq.n	8003f56 <_vfiprintf_r+0x10e>
 8003f00:	46a8      	mov	r8, r5
 8003f02:	2000      	movs	r0, #0
 8003f04:	250a      	movs	r5, #10
 8003f06:	9a07      	ldr	r2, [sp, #28]
 8003f08:	4641      	mov	r1, r8
 8003f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0e:	3b30      	subs	r3, #48	; 0x30
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d969      	bls.n	8003fe8 <_vfiprintf_r+0x1a0>
 8003f14:	b360      	cbz	r0, 8003f70 <_vfiprintf_r+0x128>
 8003f16:	e024      	b.n	8003f62 <_vfiprintf_r+0x11a>
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <_vfiprintf_r+0x214>)
 8003f1a:	429c      	cmp	r4, r3
 8003f1c:	d101      	bne.n	8003f22 <_vfiprintf_r+0xda>
 8003f1e:	68b4      	ldr	r4, [r6, #8]
 8003f20:	e7a2      	b.n	8003e68 <_vfiprintf_r+0x20>
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <_vfiprintf_r+0x218>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	bf08      	it	eq
 8003f28:	68f4      	ldreq	r4, [r6, #12]
 8003f2a:	e79d      	b.n	8003e68 <_vfiprintf_r+0x20>
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 fa7a 	bl	8004428 <__swsetup_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d09d      	beq.n	8003e74 <_vfiprintf_r+0x2c>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	b01d      	add	sp, #116	; 0x74
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f42:	46a8      	mov	r8, r5
 8003f44:	e7a2      	b.n	8003e8c <_vfiprintf_r+0x44>
 8003f46:	4a44      	ldr	r2, [pc, #272]	; (8004058 <_vfiprintf_r+0x210>)
 8003f48:	4645      	mov	r5, r8
 8003f4a:	1a80      	subs	r0, r0, r2
 8003f4c:	fa0b f000 	lsl.w	r0, fp, r0
 8003f50:	4318      	orrs	r0, r3
 8003f52:	9004      	str	r0, [sp, #16]
 8003f54:	e7be      	b.n	8003ed4 <_vfiprintf_r+0x8c>
 8003f56:	9a03      	ldr	r2, [sp, #12]
 8003f58:	1d11      	adds	r1, r2, #4
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	9103      	str	r1, [sp, #12]
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	db01      	blt.n	8003f66 <_vfiprintf_r+0x11e>
 8003f62:	9207      	str	r2, [sp, #28]
 8003f64:	e004      	b.n	8003f70 <_vfiprintf_r+0x128>
 8003f66:	4252      	negs	r2, r2
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	9207      	str	r2, [sp, #28]
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	f898 3000 	ldrb.w	r3, [r8]
 8003f74:	2b2e      	cmp	r3, #46	; 0x2e
 8003f76:	d10e      	bne.n	8003f96 <_vfiprintf_r+0x14e>
 8003f78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7e:	d138      	bne.n	8003ff2 <_vfiprintf_r+0x1aa>
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	f108 0802 	add.w	r8, r8, #2
 8003f86:	1d1a      	adds	r2, r3, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	9203      	str	r2, [sp, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bfb8      	it	lt
 8003f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	4d33      	ldr	r5, [pc, #204]	; (8004064 <_vfiprintf_r+0x21c>)
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f898 1000 	ldrb.w	r1, [r8]
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fc96 	bl	80048d0 <memchr>
 8003fa4:	b140      	cbz	r0, 8003fb8 <_vfiprintf_r+0x170>
 8003fa6:	2340      	movs	r3, #64	; 0x40
 8003fa8:	1b40      	subs	r0, r0, r5
 8003faa:	fa03 f000 	lsl.w	r0, r3, r0
 8003fae:	9b04      	ldr	r3, [sp, #16]
 8003fb0:	f108 0801 	add.w	r8, r8, #1
 8003fb4:	4303      	orrs	r3, r0
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	f898 1000 	ldrb.w	r1, [r8]
 8003fbc:	2206      	movs	r2, #6
 8003fbe:	482a      	ldr	r0, [pc, #168]	; (8004068 <_vfiprintf_r+0x220>)
 8003fc0:	f108 0701 	add.w	r7, r8, #1
 8003fc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fc8:	f000 fc82 	bl	80048d0 <memchr>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d037      	beq.n	8004040 <_vfiprintf_r+0x1f8>
 8003fd0:	4b26      	ldr	r3, [pc, #152]	; (800406c <_vfiprintf_r+0x224>)
 8003fd2:	bb1b      	cbnz	r3, 800401c <_vfiprintf_r+0x1d4>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	3307      	adds	r3, #7
 8003fd8:	f023 0307 	bic.w	r3, r3, #7
 8003fdc:	3308      	adds	r3, #8
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe2:	444b      	add	r3, r9
 8003fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe6:	e750      	b.n	8003e8a <_vfiprintf_r+0x42>
 8003fe8:	fb05 3202 	mla	r2, r5, r2, r3
 8003fec:	2001      	movs	r0, #1
 8003fee:	4688      	mov	r8, r1
 8003ff0:	e78a      	b.n	8003f08 <_vfiprintf_r+0xc0>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	250a      	movs	r5, #10
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f108 0801 	add.w	r8, r8, #1
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	4640      	mov	r0, r8
 8004000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004004:	3a30      	subs	r2, #48	; 0x30
 8004006:	2a09      	cmp	r2, #9
 8004008:	d903      	bls.n	8004012 <_vfiprintf_r+0x1ca>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0c3      	beq.n	8003f96 <_vfiprintf_r+0x14e>
 800400e:	9105      	str	r1, [sp, #20]
 8004010:	e7c1      	b.n	8003f96 <_vfiprintf_r+0x14e>
 8004012:	fb05 2101 	mla	r1, r5, r1, r2
 8004016:	2301      	movs	r3, #1
 8004018:	4680      	mov	r8, r0
 800401a:	e7f0      	b.n	8003ffe <_vfiprintf_r+0x1b6>
 800401c:	ab03      	add	r3, sp, #12
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4622      	mov	r2, r4
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_vfiprintf_r+0x228>)
 8004024:	a904      	add	r1, sp, #16
 8004026:	4630      	mov	r0, r6
 8004028:	f3af 8000 	nop.w
 800402c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004030:	4681      	mov	r9, r0
 8004032:	d1d5      	bne.n	8003fe0 <_vfiprintf_r+0x198>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	065b      	lsls	r3, r3, #25
 8004038:	f53f af7e 	bmi.w	8003f38 <_vfiprintf_r+0xf0>
 800403c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800403e:	e77d      	b.n	8003f3c <_vfiprintf_r+0xf4>
 8004040:	ab03      	add	r3, sp, #12
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4622      	mov	r2, r4
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <_vfiprintf_r+0x228>)
 8004048:	a904      	add	r1, sp, #16
 800404a:	4630      	mov	r0, r6
 800404c:	f000 f888 	bl	8004160 <_printf_i>
 8004050:	e7ec      	b.n	800402c <_vfiprintf_r+0x1e4>
 8004052:	bf00      	nop
 8004054:	08005180 	.word	0x08005180
 8004058:	0800512c 	.word	0x0800512c
 800405c:	080051a0 	.word	0x080051a0
 8004060:	08005160 	.word	0x08005160
 8004064:	08005132 	.word	0x08005132
 8004068:	08005136 	.word	0x08005136
 800406c:	00000000 	.word	0x00000000
 8004070:	08003e25 	.word	0x08003e25

08004074 <_printf_common>:
 8004074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	4691      	mov	r9, r2
 800407a:	461f      	mov	r7, r3
 800407c:	688a      	ldr	r2, [r1, #8]
 800407e:	690b      	ldr	r3, [r1, #16]
 8004080:	4606      	mov	r6, r0
 8004082:	4293      	cmp	r3, r2
 8004084:	bfb8      	it	lt
 8004086:	4613      	movlt	r3, r2
 8004088:	f8c9 3000 	str.w	r3, [r9]
 800408c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004090:	460c      	mov	r4, r1
 8004092:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004096:	b112      	cbz	r2, 800409e <_printf_common+0x2a>
 8004098:	3301      	adds	r3, #1
 800409a:	f8c9 3000 	str.w	r3, [r9]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	0699      	lsls	r1, r3, #26
 80040a2:	bf42      	ittt	mi
 80040a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040a8:	3302      	addmi	r3, #2
 80040aa:	f8c9 3000 	strmi.w	r3, [r9]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	f015 0506 	ands.w	r5, r5, #6
 80040b4:	d107      	bne.n	80040c6 <_printf_common+0x52>
 80040b6:	f104 0a19 	add.w	sl, r4, #25
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	f8d9 2000 	ldr.w	r2, [r9]
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	42ab      	cmp	r3, r5
 80040c4:	dc29      	bgt.n	800411a <_printf_common+0xa6>
 80040c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	3300      	adds	r3, #0
 80040ce:	bf18      	it	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	0692      	lsls	r2, r2, #26
 80040d4:	d42e      	bmi.n	8004134 <_printf_common+0xc0>
 80040d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040da:	4639      	mov	r1, r7
 80040dc:	4630      	mov	r0, r6
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d021      	beq.n	8004128 <_printf_common+0xb4>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	68e5      	ldr	r5, [r4, #12]
 80040e8:	f003 0306 	and.w	r3, r3, #6
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	bf18      	it	ne
 80040f0:	2500      	movne	r5, #0
 80040f2:	f8d9 2000 	ldr.w	r2, [r9]
 80040f6:	f04f 0900 	mov.w	r9, #0
 80040fa:	bf08      	it	eq
 80040fc:	1aad      	subeq	r5, r5, r2
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	6922      	ldr	r2, [r4, #16]
 8004102:	bf08      	it	eq
 8004104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004108:	4293      	cmp	r3, r2
 800410a:	bfc4      	itt	gt
 800410c:	1a9b      	subgt	r3, r3, r2
 800410e:	18ed      	addgt	r5, r5, r3
 8004110:	341a      	adds	r4, #26
 8004112:	454d      	cmp	r5, r9
 8004114:	d11a      	bne.n	800414c <_printf_common+0xd8>
 8004116:	2000      	movs	r0, #0
 8004118:	e008      	b.n	800412c <_printf_common+0xb8>
 800411a:	2301      	movs	r3, #1
 800411c:	4652      	mov	r2, sl
 800411e:	4639      	mov	r1, r7
 8004120:	4630      	mov	r0, r6
 8004122:	47c0      	blx	r8
 8004124:	3001      	adds	r0, #1
 8004126:	d103      	bne.n	8004130 <_printf_common+0xbc>
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	3501      	adds	r5, #1
 8004132:	e7c2      	b.n	80040ba <_printf_common+0x46>
 8004134:	2030      	movs	r0, #48	; 0x30
 8004136:	18e1      	adds	r1, r4, r3
 8004138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004142:	4422      	add	r2, r4
 8004144:	3302      	adds	r3, #2
 8004146:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800414a:	e7c4      	b.n	80040d6 <_printf_common+0x62>
 800414c:	2301      	movs	r3, #1
 800414e:	4622      	mov	r2, r4
 8004150:	4639      	mov	r1, r7
 8004152:	4630      	mov	r0, r6
 8004154:	47c0      	blx	r8
 8004156:	3001      	adds	r0, #1
 8004158:	d0e6      	beq.n	8004128 <_printf_common+0xb4>
 800415a:	f109 0901 	add.w	r9, r9, #1
 800415e:	e7d8      	b.n	8004112 <_printf_common+0x9e>

08004160 <_printf_i>:
 8004160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004168:	460c      	mov	r4, r1
 800416a:	7e09      	ldrb	r1, [r1, #24]
 800416c:	b085      	sub	sp, #20
 800416e:	296e      	cmp	r1, #110	; 0x6e
 8004170:	4617      	mov	r7, r2
 8004172:	4606      	mov	r6, r0
 8004174:	4698      	mov	r8, r3
 8004176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004178:	f000 80b3 	beq.w	80042e2 <_printf_i+0x182>
 800417c:	d822      	bhi.n	80041c4 <_printf_i+0x64>
 800417e:	2963      	cmp	r1, #99	; 0x63
 8004180:	d036      	beq.n	80041f0 <_printf_i+0x90>
 8004182:	d80a      	bhi.n	800419a <_printf_i+0x3a>
 8004184:	2900      	cmp	r1, #0
 8004186:	f000 80b9 	beq.w	80042fc <_printf_i+0x19c>
 800418a:	2958      	cmp	r1, #88	; 0x58
 800418c:	f000 8083 	beq.w	8004296 <_printf_i+0x136>
 8004190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004198:	e032      	b.n	8004200 <_printf_i+0xa0>
 800419a:	2964      	cmp	r1, #100	; 0x64
 800419c:	d001      	beq.n	80041a2 <_printf_i+0x42>
 800419e:	2969      	cmp	r1, #105	; 0x69
 80041a0:	d1f6      	bne.n	8004190 <_printf_i+0x30>
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	0605      	lsls	r5, r0, #24
 80041a8:	f103 0104 	add.w	r1, r3, #4
 80041ac:	d52a      	bpl.n	8004204 <_printf_i+0xa4>
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da03      	bge.n	80041be <_printf_i+0x5e>
 80041b6:	222d      	movs	r2, #45	; 0x2d
 80041b8:	425b      	negs	r3, r3
 80041ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041be:	486f      	ldr	r0, [pc, #444]	; (800437c <_printf_i+0x21c>)
 80041c0:	220a      	movs	r2, #10
 80041c2:	e039      	b.n	8004238 <_printf_i+0xd8>
 80041c4:	2973      	cmp	r1, #115	; 0x73
 80041c6:	f000 809d 	beq.w	8004304 <_printf_i+0x1a4>
 80041ca:	d808      	bhi.n	80041de <_printf_i+0x7e>
 80041cc:	296f      	cmp	r1, #111	; 0x6f
 80041ce:	d020      	beq.n	8004212 <_printf_i+0xb2>
 80041d0:	2970      	cmp	r1, #112	; 0x70
 80041d2:	d1dd      	bne.n	8004190 <_printf_i+0x30>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	f043 0320 	orr.w	r3, r3, #32
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	e003      	b.n	80041e6 <_printf_i+0x86>
 80041de:	2975      	cmp	r1, #117	; 0x75
 80041e0:	d017      	beq.n	8004212 <_printf_i+0xb2>
 80041e2:	2978      	cmp	r1, #120	; 0x78
 80041e4:	d1d4      	bne.n	8004190 <_printf_i+0x30>
 80041e6:	2378      	movs	r3, #120	; 0x78
 80041e8:	4865      	ldr	r0, [pc, #404]	; (8004380 <_printf_i+0x220>)
 80041ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ee:	e055      	b.n	800429c <_printf_i+0x13c>
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f6:	1d19      	adds	r1, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6011      	str	r1, [r2, #0]
 80041fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004200:	2301      	movs	r3, #1
 8004202:	e08c      	b.n	800431e <_printf_i+0x1be>
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f010 0f40 	tst.w	r0, #64	; 0x40
 800420a:	6011      	str	r1, [r2, #0]
 800420c:	bf18      	it	ne
 800420e:	b21b      	sxthne	r3, r3
 8004210:	e7cf      	b.n	80041b2 <_printf_i+0x52>
 8004212:	6813      	ldr	r3, [r2, #0]
 8004214:	6825      	ldr	r5, [r4, #0]
 8004216:	1d18      	adds	r0, r3, #4
 8004218:	6010      	str	r0, [r2, #0]
 800421a:	0628      	lsls	r0, r5, #24
 800421c:	d501      	bpl.n	8004222 <_printf_i+0xc2>
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	e002      	b.n	8004228 <_printf_i+0xc8>
 8004222:	0668      	lsls	r0, r5, #25
 8004224:	d5fb      	bpl.n	800421e <_printf_i+0xbe>
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	296f      	cmp	r1, #111	; 0x6f
 800422a:	bf14      	ite	ne
 800422c:	220a      	movne	r2, #10
 800422e:	2208      	moveq	r2, #8
 8004230:	4852      	ldr	r0, [pc, #328]	; (800437c <_printf_i+0x21c>)
 8004232:	2100      	movs	r1, #0
 8004234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004238:	6865      	ldr	r5, [r4, #4]
 800423a:	2d00      	cmp	r5, #0
 800423c:	60a5      	str	r5, [r4, #8]
 800423e:	f2c0 8095 	blt.w	800436c <_printf_i+0x20c>
 8004242:	6821      	ldr	r1, [r4, #0]
 8004244:	f021 0104 	bic.w	r1, r1, #4
 8004248:	6021      	str	r1, [r4, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d13d      	bne.n	80042ca <_printf_i+0x16a>
 800424e:	2d00      	cmp	r5, #0
 8004250:	f040 808e 	bne.w	8004370 <_printf_i+0x210>
 8004254:	4665      	mov	r5, ip
 8004256:	2a08      	cmp	r2, #8
 8004258:	d10b      	bne.n	8004272 <_printf_i+0x112>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	07db      	lsls	r3, r3, #31
 800425e:	d508      	bpl.n	8004272 <_printf_i+0x112>
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	bfde      	ittt	le
 8004268:	2330      	movle	r3, #48	; 0x30
 800426a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800426e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004272:	ebac 0305 	sub.w	r3, ip, r5
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	f8cd 8000 	str.w	r8, [sp]
 800427c:	463b      	mov	r3, r7
 800427e:	aa03      	add	r2, sp, #12
 8004280:	4621      	mov	r1, r4
 8004282:	4630      	mov	r0, r6
 8004284:	f7ff fef6 	bl	8004074 <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	d14d      	bne.n	8004328 <_printf_i+0x1c8>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	b005      	add	sp, #20
 8004292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004296:	4839      	ldr	r0, [pc, #228]	; (800437c <_printf_i+0x21c>)
 8004298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800429c:	6813      	ldr	r3, [r2, #0]
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	1d1d      	adds	r5, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6015      	str	r5, [r2, #0]
 80042a6:	060a      	lsls	r2, r1, #24
 80042a8:	d50b      	bpl.n	80042c2 <_printf_i+0x162>
 80042aa:	07ca      	lsls	r2, r1, #31
 80042ac:	bf44      	itt	mi
 80042ae:	f041 0120 	orrmi.w	r1, r1, #32
 80042b2:	6021      	strmi	r1, [r4, #0]
 80042b4:	b91b      	cbnz	r3, 80042be <_printf_i+0x15e>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	f022 0220 	bic.w	r2, r2, #32
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	e7b7      	b.n	8004232 <_printf_i+0xd2>
 80042c2:	064d      	lsls	r5, r1, #25
 80042c4:	bf48      	it	mi
 80042c6:	b29b      	uxthmi	r3, r3
 80042c8:	e7ef      	b.n	80042aa <_printf_i+0x14a>
 80042ca:	4665      	mov	r5, ip
 80042cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80042d0:	fb02 3311 	mls	r3, r2, r1, r3
 80042d4:	5cc3      	ldrb	r3, [r0, r3]
 80042d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042da:	460b      	mov	r3, r1
 80042dc:	2900      	cmp	r1, #0
 80042de:	d1f5      	bne.n	80042cc <_printf_i+0x16c>
 80042e0:	e7b9      	b.n	8004256 <_printf_i+0xf6>
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	1d18      	adds	r0, r3, #4
 80042e8:	6961      	ldr	r1, [r4, #20]
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	0628      	lsls	r0, r5, #24
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	d501      	bpl.n	80042f6 <_printf_i+0x196>
 80042f2:	6019      	str	r1, [r3, #0]
 80042f4:	e002      	b.n	80042fc <_printf_i+0x19c>
 80042f6:	066a      	lsls	r2, r5, #25
 80042f8:	d5fb      	bpl.n	80042f2 <_printf_i+0x192>
 80042fa:	8019      	strh	r1, [r3, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	4665      	mov	r5, ip
 8004300:	6123      	str	r3, [r4, #16]
 8004302:	e7b9      	b.n	8004278 <_printf_i+0x118>
 8004304:	6813      	ldr	r3, [r2, #0]
 8004306:	1d19      	adds	r1, r3, #4
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	681d      	ldr	r5, [r3, #0]
 800430c:	6862      	ldr	r2, [r4, #4]
 800430e:	2100      	movs	r1, #0
 8004310:	4628      	mov	r0, r5
 8004312:	f000 fadd 	bl	80048d0 <memchr>
 8004316:	b108      	cbz	r0, 800431c <_printf_i+0x1bc>
 8004318:	1b40      	subs	r0, r0, r5
 800431a:	6060      	str	r0, [r4, #4]
 800431c:	6863      	ldr	r3, [r4, #4]
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	2300      	movs	r3, #0
 8004322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004326:	e7a7      	b.n	8004278 <_printf_i+0x118>
 8004328:	6923      	ldr	r3, [r4, #16]
 800432a:	462a      	mov	r2, r5
 800432c:	4639      	mov	r1, r7
 800432e:	4630      	mov	r0, r6
 8004330:	47c0      	blx	r8
 8004332:	3001      	adds	r0, #1
 8004334:	d0aa      	beq.n	800428c <_printf_i+0x12c>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	079b      	lsls	r3, r3, #30
 800433a:	d413      	bmi.n	8004364 <_printf_i+0x204>
 800433c:	68e0      	ldr	r0, [r4, #12]
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	4298      	cmp	r0, r3
 8004342:	bfb8      	it	lt
 8004344:	4618      	movlt	r0, r3
 8004346:	e7a3      	b.n	8004290 <_printf_i+0x130>
 8004348:	2301      	movs	r3, #1
 800434a:	464a      	mov	r2, r9
 800434c:	4639      	mov	r1, r7
 800434e:	4630      	mov	r0, r6
 8004350:	47c0      	blx	r8
 8004352:	3001      	adds	r0, #1
 8004354:	d09a      	beq.n	800428c <_printf_i+0x12c>
 8004356:	3501      	adds	r5, #1
 8004358:	68e3      	ldr	r3, [r4, #12]
 800435a:	9a03      	ldr	r2, [sp, #12]
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	42ab      	cmp	r3, r5
 8004360:	dcf2      	bgt.n	8004348 <_printf_i+0x1e8>
 8004362:	e7eb      	b.n	800433c <_printf_i+0x1dc>
 8004364:	2500      	movs	r5, #0
 8004366:	f104 0919 	add.w	r9, r4, #25
 800436a:	e7f5      	b.n	8004358 <_printf_i+0x1f8>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ac      	bne.n	80042ca <_printf_i+0x16a>
 8004370:	7803      	ldrb	r3, [r0, #0]
 8004372:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800437a:	e76c      	b.n	8004256 <_printf_i+0xf6>
 800437c:	0800513d 	.word	0x0800513d
 8004380:	0800514e 	.word	0x0800514e

08004384 <__swbuf_r>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	460e      	mov	r6, r1
 8004388:	4614      	mov	r4, r2
 800438a:	4605      	mov	r5, r0
 800438c:	b118      	cbz	r0, 8004396 <__swbuf_r+0x12>
 800438e:	6983      	ldr	r3, [r0, #24]
 8004390:	b90b      	cbnz	r3, 8004396 <__swbuf_r+0x12>
 8004392:	f000 f9af 	bl	80046f4 <__sinit>
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <__swbuf_r+0x98>)
 8004398:	429c      	cmp	r4, r3
 800439a:	d12a      	bne.n	80043f2 <__swbuf_r+0x6e>
 800439c:	686c      	ldr	r4, [r5, #4]
 800439e:	69a3      	ldr	r3, [r4, #24]
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	071a      	lsls	r2, r3, #28
 80043a6:	d52e      	bpl.n	8004406 <__swbuf_r+0x82>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	b363      	cbz	r3, 8004406 <__swbuf_r+0x82>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	b2f6      	uxtb	r6, r6
 80043b2:	1ac0      	subs	r0, r0, r3
 80043b4:	6963      	ldr	r3, [r4, #20]
 80043b6:	4637      	mov	r7, r6
 80043b8:	4283      	cmp	r3, r0
 80043ba:	dc04      	bgt.n	80043c6 <__swbuf_r+0x42>
 80043bc:	4621      	mov	r1, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f92e 	bl	8004620 <_fflush_r>
 80043c4:	bb28      	cbnz	r0, 8004412 <__swbuf_r+0x8e>
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	3001      	adds	r0, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	6022      	str	r2, [r4, #0]
 80043d4:	701e      	strb	r6, [r3, #0]
 80043d6:	6963      	ldr	r3, [r4, #20]
 80043d8:	4283      	cmp	r3, r0
 80043da:	d004      	beq.n	80043e6 <__swbuf_r+0x62>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d519      	bpl.n	8004416 <__swbuf_r+0x92>
 80043e2:	2e0a      	cmp	r6, #10
 80043e4:	d117      	bne.n	8004416 <__swbuf_r+0x92>
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 f919 	bl	8004620 <_fflush_r>
 80043ee:	b190      	cbz	r0, 8004416 <__swbuf_r+0x92>
 80043f0:	e00f      	b.n	8004412 <__swbuf_r+0x8e>
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <__swbuf_r+0x9c>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d101      	bne.n	80043fc <__swbuf_r+0x78>
 80043f8:	68ac      	ldr	r4, [r5, #8]
 80043fa:	e7d0      	b.n	800439e <__swbuf_r+0x1a>
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <__swbuf_r+0xa0>)
 80043fe:	429c      	cmp	r4, r3
 8004400:	bf08      	it	eq
 8004402:	68ec      	ldreq	r4, [r5, #12]
 8004404:	e7cb      	b.n	800439e <__swbuf_r+0x1a>
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 f80d 	bl	8004428 <__swsetup_r>
 800440e:	2800      	cmp	r0, #0
 8004410:	d0cc      	beq.n	80043ac <__swbuf_r+0x28>
 8004412:	f04f 37ff 	mov.w	r7, #4294967295
 8004416:	4638      	mov	r0, r7
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441a:	bf00      	nop
 800441c:	08005180 	.word	0x08005180
 8004420:	080051a0 	.word	0x080051a0
 8004424:	08005160 	.word	0x08005160

08004428 <__swsetup_r>:
 8004428:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <__swsetup_r+0xcc>)
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	681d      	ldr	r5, [r3, #0]
 800442e:	4606      	mov	r6, r0
 8004430:	460c      	mov	r4, r1
 8004432:	b125      	cbz	r5, 800443e <__swsetup_r+0x16>
 8004434:	69ab      	ldr	r3, [r5, #24]
 8004436:	b913      	cbnz	r3, 800443e <__swsetup_r+0x16>
 8004438:	4628      	mov	r0, r5
 800443a:	f000 f95b 	bl	80046f4 <__sinit>
 800443e:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <__swsetup_r+0xd0>)
 8004440:	429c      	cmp	r4, r3
 8004442:	d10f      	bne.n	8004464 <__swsetup_r+0x3c>
 8004444:	686c      	ldr	r4, [r5, #4]
 8004446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444a:	b29a      	uxth	r2, r3
 800444c:	0715      	lsls	r5, r2, #28
 800444e:	d42c      	bmi.n	80044aa <__swsetup_r+0x82>
 8004450:	06d0      	lsls	r0, r2, #27
 8004452:	d411      	bmi.n	8004478 <__swsetup_r+0x50>
 8004454:	2209      	movs	r2, #9
 8004456:	6032      	str	r2, [r6, #0]
 8004458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	e03e      	b.n	80044e2 <__swsetup_r+0xba>
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <__swsetup_r+0xd4>)
 8004466:	429c      	cmp	r4, r3
 8004468:	d101      	bne.n	800446e <__swsetup_r+0x46>
 800446a:	68ac      	ldr	r4, [r5, #8]
 800446c:	e7eb      	b.n	8004446 <__swsetup_r+0x1e>
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <__swsetup_r+0xd8>)
 8004470:	429c      	cmp	r4, r3
 8004472:	bf08      	it	eq
 8004474:	68ec      	ldreq	r4, [r5, #12]
 8004476:	e7e6      	b.n	8004446 <__swsetup_r+0x1e>
 8004478:	0751      	lsls	r1, r2, #29
 800447a:	d512      	bpl.n	80044a2 <__swsetup_r+0x7a>
 800447c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800447e:	b141      	cbz	r1, 8004492 <__swsetup_r+0x6a>
 8004480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004484:	4299      	cmp	r1, r3
 8004486:	d002      	beq.n	800448e <__swsetup_r+0x66>
 8004488:	4630      	mov	r0, r6
 800448a:	f000 fa2f 	bl	80048ec <_free_r>
 800448e:	2300      	movs	r3, #0
 8004490:	6363      	str	r3, [r4, #52]	; 0x34
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	2300      	movs	r3, #0
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	f043 0308 	orr.w	r3, r3, #8
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	6923      	ldr	r3, [r4, #16]
 80044ac:	b94b      	cbnz	r3, 80044c2 <__swsetup_r+0x9a>
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d003      	beq.n	80044c2 <__swsetup_r+0x9a>
 80044ba:	4621      	mov	r1, r4
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 f9c7 	bl	8004850 <__smakebuf_r>
 80044c2:	89a2      	ldrh	r2, [r4, #12]
 80044c4:	f012 0301 	ands.w	r3, r2, #1
 80044c8:	d00c      	beq.n	80044e4 <__swsetup_r+0xbc>
 80044ca:	2300      	movs	r3, #0
 80044cc:	60a3      	str	r3, [r4, #8]
 80044ce:	6963      	ldr	r3, [r4, #20]
 80044d0:	425b      	negs	r3, r3
 80044d2:	61a3      	str	r3, [r4, #24]
 80044d4:	6923      	ldr	r3, [r4, #16]
 80044d6:	b953      	cbnz	r3, 80044ee <__swsetup_r+0xc6>
 80044d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80044e0:	d1ba      	bne.n	8004458 <__swsetup_r+0x30>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	0792      	lsls	r2, r2, #30
 80044e6:	bf58      	it	pl
 80044e8:	6963      	ldrpl	r3, [r4, #20]
 80044ea:	60a3      	str	r3, [r4, #8]
 80044ec:	e7f2      	b.n	80044d4 <__swsetup_r+0xac>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e7f7      	b.n	80044e2 <__swsetup_r+0xba>
 80044f2:	bf00      	nop
 80044f4:	20000098 	.word	0x20000098
 80044f8:	08005180 	.word	0x08005180
 80044fc:	080051a0 	.word	0x080051a0
 8004500:	08005160 	.word	0x08005160

08004504 <abort>:
 8004504:	b508      	push	{r3, lr}
 8004506:	2006      	movs	r0, #6
 8004508:	f000 face 	bl	8004aa8 <raise>
 800450c:	2001      	movs	r0, #1
 800450e:	f7ff fb0a 	bl	8003b26 <_exit>
	...

08004514 <__sflush_r>:
 8004514:	898a      	ldrh	r2, [r1, #12]
 8004516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	4605      	mov	r5, r0
 800451c:	0710      	lsls	r0, r2, #28
 800451e:	460c      	mov	r4, r1
 8004520:	d458      	bmi.n	80045d4 <__sflush_r+0xc0>
 8004522:	684b      	ldr	r3, [r1, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	dc05      	bgt.n	8004534 <__sflush_r+0x20>
 8004528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	dc02      	bgt.n	8004534 <__sflush_r+0x20>
 800452e:	2000      	movs	r0, #0
 8004530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004536:	2e00      	cmp	r6, #0
 8004538:	d0f9      	beq.n	800452e <__sflush_r+0x1a>
 800453a:	2300      	movs	r3, #0
 800453c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004540:	682f      	ldr	r7, [r5, #0]
 8004542:	6a21      	ldr	r1, [r4, #32]
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	d032      	beq.n	80045ae <__sflush_r+0x9a>
 8004548:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	075a      	lsls	r2, r3, #29
 800454e:	d505      	bpl.n	800455c <__sflush_r+0x48>
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	1ac0      	subs	r0, r0, r3
 8004554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004556:	b10b      	cbz	r3, 800455c <__sflush_r+0x48>
 8004558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800455a:	1ac0      	subs	r0, r0, r3
 800455c:	2300      	movs	r3, #0
 800455e:	4602      	mov	r2, r0
 8004560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004562:	6a21      	ldr	r1, [r4, #32]
 8004564:	4628      	mov	r0, r5
 8004566:	47b0      	blx	r6
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	d106      	bne.n	800457c <__sflush_r+0x68>
 800456e:	6829      	ldr	r1, [r5, #0]
 8004570:	291d      	cmp	r1, #29
 8004572:	d848      	bhi.n	8004606 <__sflush_r+0xf2>
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <__sflush_r+0x108>)
 8004576:	40ca      	lsrs	r2, r1
 8004578:	07d6      	lsls	r6, r2, #31
 800457a:	d544      	bpl.n	8004606 <__sflush_r+0xf2>
 800457c:	2200      	movs	r2, #0
 800457e:	6062      	str	r2, [r4, #4]
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	04d9      	lsls	r1, r3, #19
 8004584:	6022      	str	r2, [r4, #0]
 8004586:	d504      	bpl.n	8004592 <__sflush_r+0x7e>
 8004588:	1c42      	adds	r2, r0, #1
 800458a:	d101      	bne.n	8004590 <__sflush_r+0x7c>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b903      	cbnz	r3, 8004592 <__sflush_r+0x7e>
 8004590:	6560      	str	r0, [r4, #84]	; 0x54
 8004592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004594:	602f      	str	r7, [r5, #0]
 8004596:	2900      	cmp	r1, #0
 8004598:	d0c9      	beq.n	800452e <__sflush_r+0x1a>
 800459a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800459e:	4299      	cmp	r1, r3
 80045a0:	d002      	beq.n	80045a8 <__sflush_r+0x94>
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 f9a2 	bl	80048ec <_free_r>
 80045a8:	2000      	movs	r0, #0
 80045aa:	6360      	str	r0, [r4, #52]	; 0x34
 80045ac:	e7c0      	b.n	8004530 <__sflush_r+0x1c>
 80045ae:	2301      	movs	r3, #1
 80045b0:	4628      	mov	r0, r5
 80045b2:	47b0      	blx	r6
 80045b4:	1c41      	adds	r1, r0, #1
 80045b6:	d1c8      	bne.n	800454a <__sflush_r+0x36>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0c5      	beq.n	800454a <__sflush_r+0x36>
 80045be:	2b1d      	cmp	r3, #29
 80045c0:	d001      	beq.n	80045c6 <__sflush_r+0xb2>
 80045c2:	2b16      	cmp	r3, #22
 80045c4:	d101      	bne.n	80045ca <__sflush_r+0xb6>
 80045c6:	602f      	str	r7, [r5, #0]
 80045c8:	e7b1      	b.n	800452e <__sflush_r+0x1a>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	e7ad      	b.n	8004530 <__sflush_r+0x1c>
 80045d4:	690f      	ldr	r7, [r1, #16]
 80045d6:	2f00      	cmp	r7, #0
 80045d8:	d0a9      	beq.n	800452e <__sflush_r+0x1a>
 80045da:	0793      	lsls	r3, r2, #30
 80045dc:	bf18      	it	ne
 80045de:	2300      	movne	r3, #0
 80045e0:	680e      	ldr	r6, [r1, #0]
 80045e2:	bf08      	it	eq
 80045e4:	694b      	ldreq	r3, [r1, #20]
 80045e6:	eba6 0807 	sub.w	r8, r6, r7
 80045ea:	600f      	str	r7, [r1, #0]
 80045ec:	608b      	str	r3, [r1, #8]
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	dd9c      	ble.n	800452e <__sflush_r+0x1a>
 80045f4:	4643      	mov	r3, r8
 80045f6:	463a      	mov	r2, r7
 80045f8:	6a21      	ldr	r1, [r4, #32]
 80045fa:	4628      	mov	r0, r5
 80045fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045fe:	47b0      	blx	r6
 8004600:	2800      	cmp	r0, #0
 8004602:	dc06      	bgt.n	8004612 <__sflush_r+0xfe>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	e78e      	b.n	8004530 <__sflush_r+0x1c>
 8004612:	4407      	add	r7, r0
 8004614:	eba8 0800 	sub.w	r8, r8, r0
 8004618:	e7e9      	b.n	80045ee <__sflush_r+0xda>
 800461a:	bf00      	nop
 800461c:	20400001 	.word	0x20400001

08004620 <_fflush_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	4605      	mov	r5, r0
 8004626:	460c      	mov	r4, r1
 8004628:	b1db      	cbz	r3, 8004662 <_fflush_r+0x42>
 800462a:	b118      	cbz	r0, 8004634 <_fflush_r+0x14>
 800462c:	6983      	ldr	r3, [r0, #24]
 800462e:	b90b      	cbnz	r3, 8004634 <_fflush_r+0x14>
 8004630:	f000 f860 	bl	80046f4 <__sinit>
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <_fflush_r+0x48>)
 8004636:	429c      	cmp	r4, r3
 8004638:	d109      	bne.n	800464e <_fflush_r+0x2e>
 800463a:	686c      	ldr	r4, [r5, #4]
 800463c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004640:	b17b      	cbz	r3, 8004662 <_fflush_r+0x42>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800464a:	f7ff bf63 	b.w	8004514 <__sflush_r>
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <_fflush_r+0x4c>)
 8004650:	429c      	cmp	r4, r3
 8004652:	d101      	bne.n	8004658 <_fflush_r+0x38>
 8004654:	68ac      	ldr	r4, [r5, #8]
 8004656:	e7f1      	b.n	800463c <_fflush_r+0x1c>
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <_fflush_r+0x50>)
 800465a:	429c      	cmp	r4, r3
 800465c:	bf08      	it	eq
 800465e:	68ec      	ldreq	r4, [r5, #12]
 8004660:	e7ec      	b.n	800463c <_fflush_r+0x1c>
 8004662:	2000      	movs	r0, #0
 8004664:	bd38      	pop	{r3, r4, r5, pc}
 8004666:	bf00      	nop
 8004668:	08005180 	.word	0x08005180
 800466c:	080051a0 	.word	0x080051a0
 8004670:	08005160 	.word	0x08005160

08004674 <std>:
 8004674:	2300      	movs	r3, #0
 8004676:	b510      	push	{r4, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	e9c0 3300 	strd	r3, r3, [r0]
 800467e:	6083      	str	r3, [r0, #8]
 8004680:	8181      	strh	r1, [r0, #12]
 8004682:	6643      	str	r3, [r0, #100]	; 0x64
 8004684:	81c2      	strh	r2, [r0, #14]
 8004686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800468a:	6183      	str	r3, [r0, #24]
 800468c:	4619      	mov	r1, r3
 800468e:	2208      	movs	r2, #8
 8004690:	305c      	adds	r0, #92	; 0x5c
 8004692:	f7ff fbaa 	bl	8003dea <memset>
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <std+0x38>)
 8004698:	6224      	str	r4, [r4, #32]
 800469a:	6263      	str	r3, [r4, #36]	; 0x24
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <std+0x3c>)
 800469e:	62a3      	str	r3, [r4, #40]	; 0x28
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <std+0x40>)
 80046a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <std+0x44>)
 80046a6:	6323      	str	r3, [r4, #48]	; 0x30
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	bf00      	nop
 80046ac:	08004ae1 	.word	0x08004ae1
 80046b0:	08004b03 	.word	0x08004b03
 80046b4:	08004b3b 	.word	0x08004b3b
 80046b8:	08004b5f 	.word	0x08004b5f

080046bc <_cleanup_r>:
 80046bc:	4901      	ldr	r1, [pc, #4]	; (80046c4 <_cleanup_r+0x8>)
 80046be:	f000 b885 	b.w	80047cc <_fwalk_reent>
 80046c2:	bf00      	nop
 80046c4:	08004621 	.word	0x08004621

080046c8 <__sfmoreglue>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	2568      	movs	r5, #104	; 0x68
 80046cc:	1e4a      	subs	r2, r1, #1
 80046ce:	4355      	muls	r5, r2
 80046d0:	460e      	mov	r6, r1
 80046d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046d6:	f000 f955 	bl	8004984 <_malloc_r>
 80046da:	4604      	mov	r4, r0
 80046dc:	b140      	cbz	r0, 80046f0 <__sfmoreglue+0x28>
 80046de:	2100      	movs	r1, #0
 80046e0:	e9c0 1600 	strd	r1, r6, [r0]
 80046e4:	300c      	adds	r0, #12
 80046e6:	60a0      	str	r0, [r4, #8]
 80046e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046ec:	f7ff fb7d 	bl	8003dea <memset>
 80046f0:	4620      	mov	r0, r4
 80046f2:	bd70      	pop	{r4, r5, r6, pc}

080046f4 <__sinit>:
 80046f4:	6983      	ldr	r3, [r0, #24]
 80046f6:	b510      	push	{r4, lr}
 80046f8:	4604      	mov	r4, r0
 80046fa:	bb33      	cbnz	r3, 800474a <__sinit+0x56>
 80046fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004700:	6503      	str	r3, [r0, #80]	; 0x50
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <__sinit+0x58>)
 8004704:	4a12      	ldr	r2, [pc, #72]	; (8004750 <__sinit+0x5c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6282      	str	r2, [r0, #40]	; 0x28
 800470a:	4298      	cmp	r0, r3
 800470c:	bf04      	itt	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	6183      	streq	r3, [r0, #24]
 8004712:	f000 f81f 	bl	8004754 <__sfp>
 8004716:	6060      	str	r0, [r4, #4]
 8004718:	4620      	mov	r0, r4
 800471a:	f000 f81b 	bl	8004754 <__sfp>
 800471e:	60a0      	str	r0, [r4, #8]
 8004720:	4620      	mov	r0, r4
 8004722:	f000 f817 	bl	8004754 <__sfp>
 8004726:	2200      	movs	r2, #0
 8004728:	60e0      	str	r0, [r4, #12]
 800472a:	2104      	movs	r1, #4
 800472c:	6860      	ldr	r0, [r4, #4]
 800472e:	f7ff ffa1 	bl	8004674 <std>
 8004732:	2201      	movs	r2, #1
 8004734:	2109      	movs	r1, #9
 8004736:	68a0      	ldr	r0, [r4, #8]
 8004738:	f7ff ff9c 	bl	8004674 <std>
 800473c:	2202      	movs	r2, #2
 800473e:	2112      	movs	r1, #18
 8004740:	68e0      	ldr	r0, [r4, #12]
 8004742:	f7ff ff97 	bl	8004674 <std>
 8004746:	2301      	movs	r3, #1
 8004748:	61a3      	str	r3, [r4, #24]
 800474a:	bd10      	pop	{r4, pc}
 800474c:	08005128 	.word	0x08005128
 8004750:	080046bd 	.word	0x080046bd

08004754 <__sfp>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <__sfp+0x70>)
 8004758:	4607      	mov	r7, r0
 800475a:	681e      	ldr	r6, [r3, #0]
 800475c:	69b3      	ldr	r3, [r6, #24]
 800475e:	b913      	cbnz	r3, 8004766 <__sfp+0x12>
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffc7 	bl	80046f4 <__sinit>
 8004766:	3648      	adds	r6, #72	; 0x48
 8004768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800476c:	3b01      	subs	r3, #1
 800476e:	d503      	bpl.n	8004778 <__sfp+0x24>
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	b133      	cbz	r3, 8004782 <__sfp+0x2e>
 8004774:	6836      	ldr	r6, [r6, #0]
 8004776:	e7f7      	b.n	8004768 <__sfp+0x14>
 8004778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800477c:	b16d      	cbz	r5, 800479a <__sfp+0x46>
 800477e:	3468      	adds	r4, #104	; 0x68
 8004780:	e7f4      	b.n	800476c <__sfp+0x18>
 8004782:	2104      	movs	r1, #4
 8004784:	4638      	mov	r0, r7
 8004786:	f7ff ff9f 	bl	80046c8 <__sfmoreglue>
 800478a:	6030      	str	r0, [r6, #0]
 800478c:	2800      	cmp	r0, #0
 800478e:	d1f1      	bne.n	8004774 <__sfp+0x20>
 8004790:	230c      	movs	r3, #12
 8004792:	4604      	mov	r4, r0
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4620      	mov	r0, r4
 8004798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <__sfp+0x74>)
 800479c:	6665      	str	r5, [r4, #100]	; 0x64
 800479e:	e9c4 5500 	strd	r5, r5, [r4]
 80047a2:	60a5      	str	r5, [r4, #8]
 80047a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80047a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80047ac:	2208      	movs	r2, #8
 80047ae:	4629      	mov	r1, r5
 80047b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047b4:	f7ff fb19 	bl	8003dea <memset>
 80047b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047c0:	e7e9      	b.n	8004796 <__sfp+0x42>
 80047c2:	bf00      	nop
 80047c4:	08005128 	.word	0x08005128
 80047c8:	ffff0001 	.word	0xffff0001

080047cc <_fwalk_reent>:
 80047cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d0:	4680      	mov	r8, r0
 80047d2:	4689      	mov	r9, r1
 80047d4:	2600      	movs	r6, #0
 80047d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047da:	b914      	cbnz	r4, 80047e2 <_fwalk_reent+0x16>
 80047dc:	4630      	mov	r0, r6
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80047e6:	3f01      	subs	r7, #1
 80047e8:	d501      	bpl.n	80047ee <_fwalk_reent+0x22>
 80047ea:	6824      	ldr	r4, [r4, #0]
 80047ec:	e7f5      	b.n	80047da <_fwalk_reent+0xe>
 80047ee:	89ab      	ldrh	r3, [r5, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d907      	bls.n	8004804 <_fwalk_reent+0x38>
 80047f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047f8:	3301      	adds	r3, #1
 80047fa:	d003      	beq.n	8004804 <_fwalk_reent+0x38>
 80047fc:	4629      	mov	r1, r5
 80047fe:	4640      	mov	r0, r8
 8004800:	47c8      	blx	r9
 8004802:	4306      	orrs	r6, r0
 8004804:	3568      	adds	r5, #104	; 0x68
 8004806:	e7ee      	b.n	80047e6 <_fwalk_reent+0x1a>

08004808 <__swhatbuf_r>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	460e      	mov	r6, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	b096      	sub	sp, #88	; 0x58
 8004812:	2900      	cmp	r1, #0
 8004814:	4614      	mov	r4, r2
 8004816:	461d      	mov	r5, r3
 8004818:	da07      	bge.n	800482a <__swhatbuf_r+0x22>
 800481a:	2300      	movs	r3, #0
 800481c:	602b      	str	r3, [r5, #0]
 800481e:	89b3      	ldrh	r3, [r6, #12]
 8004820:	061a      	lsls	r2, r3, #24
 8004822:	d410      	bmi.n	8004846 <__swhatbuf_r+0x3e>
 8004824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004828:	e00e      	b.n	8004848 <__swhatbuf_r+0x40>
 800482a:	466a      	mov	r2, sp
 800482c:	f000 f9be 	bl	8004bac <_fstat_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	dbf2      	blt.n	800481a <__swhatbuf_r+0x12>
 8004834:	9a01      	ldr	r2, [sp, #4]
 8004836:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800483a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800483e:	425a      	negs	r2, r3
 8004840:	415a      	adcs	r2, r3
 8004842:	602a      	str	r2, [r5, #0]
 8004844:	e7ee      	b.n	8004824 <__swhatbuf_r+0x1c>
 8004846:	2340      	movs	r3, #64	; 0x40
 8004848:	2000      	movs	r0, #0
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	b016      	add	sp, #88	; 0x58
 800484e:	bd70      	pop	{r4, r5, r6, pc}

08004850 <__smakebuf_r>:
 8004850:	898b      	ldrh	r3, [r1, #12]
 8004852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004854:	079d      	lsls	r5, r3, #30
 8004856:	4606      	mov	r6, r0
 8004858:	460c      	mov	r4, r1
 800485a:	d507      	bpl.n	800486c <__smakebuf_r+0x1c>
 800485c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	2301      	movs	r3, #1
 8004866:	6163      	str	r3, [r4, #20]
 8004868:	b002      	add	sp, #8
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	ab01      	add	r3, sp, #4
 800486e:	466a      	mov	r2, sp
 8004870:	f7ff ffca 	bl	8004808 <__swhatbuf_r>
 8004874:	9900      	ldr	r1, [sp, #0]
 8004876:	4605      	mov	r5, r0
 8004878:	4630      	mov	r0, r6
 800487a:	f000 f883 	bl	8004984 <_malloc_r>
 800487e:	b948      	cbnz	r0, 8004894 <__smakebuf_r+0x44>
 8004880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004884:	059a      	lsls	r2, r3, #22
 8004886:	d4ef      	bmi.n	8004868 <__smakebuf_r+0x18>
 8004888:	f023 0303 	bic.w	r3, r3, #3
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	e7e3      	b.n	800485c <__smakebuf_r+0xc>
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <__smakebuf_r+0x7c>)
 8004896:	62b3      	str	r3, [r6, #40]	; 0x28
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	6020      	str	r0, [r4, #0]
 800489c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	9b00      	ldr	r3, [sp, #0]
 80048a4:	6120      	str	r0, [r4, #16]
 80048a6:	6163      	str	r3, [r4, #20]
 80048a8:	9b01      	ldr	r3, [sp, #4]
 80048aa:	b15b      	cbz	r3, 80048c4 <__smakebuf_r+0x74>
 80048ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f98d 	bl	8004bd0 <_isatty_r>
 80048b6:	b128      	cbz	r0, 80048c4 <__smakebuf_r+0x74>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	431d      	orrs	r5, r3
 80048c8:	81a5      	strh	r5, [r4, #12]
 80048ca:	e7cd      	b.n	8004868 <__smakebuf_r+0x18>
 80048cc:	080046bd 	.word	0x080046bd

080048d0 <memchr>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	b2c9      	uxtb	r1, r1
 80048d4:	4402      	add	r2, r0
 80048d6:	4290      	cmp	r0, r2
 80048d8:	4603      	mov	r3, r0
 80048da:	d101      	bne.n	80048e0 <memchr+0x10>
 80048dc:	2300      	movs	r3, #0
 80048de:	e003      	b.n	80048e8 <memchr+0x18>
 80048e0:	781c      	ldrb	r4, [r3, #0]
 80048e2:	3001      	adds	r0, #1
 80048e4:	428c      	cmp	r4, r1
 80048e6:	d1f6      	bne.n	80048d6 <memchr+0x6>
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd10      	pop	{r4, pc}

080048ec <_free_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4605      	mov	r5, r0
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d043      	beq.n	800497c <_free_r+0x90>
 80048f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f8:	1f0c      	subs	r4, r1, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bfb8      	it	lt
 80048fe:	18e4      	addlt	r4, r4, r3
 8004900:	f000 f988 	bl	8004c14 <__malloc_lock>
 8004904:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <_free_r+0x94>)
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	4610      	mov	r0, r2
 800490a:	b933      	cbnz	r3, 800491a <_free_r+0x2e>
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	6014      	str	r4, [r2, #0]
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004916:	f000 b97e 	b.w	8004c16 <__malloc_unlock>
 800491a:	42a3      	cmp	r3, r4
 800491c:	d90b      	bls.n	8004936 <_free_r+0x4a>
 800491e:	6821      	ldr	r1, [r4, #0]
 8004920:	1862      	adds	r2, r4, r1
 8004922:	4293      	cmp	r3, r2
 8004924:	bf01      	itttt	eq
 8004926:	681a      	ldreq	r2, [r3, #0]
 8004928:	685b      	ldreq	r3, [r3, #4]
 800492a:	1852      	addeq	r2, r2, r1
 800492c:	6022      	streq	r2, [r4, #0]
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	6004      	str	r4, [r0, #0]
 8004932:	e7ed      	b.n	8004910 <_free_r+0x24>
 8004934:	4613      	mov	r3, r2
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	b10a      	cbz	r2, 800493e <_free_r+0x52>
 800493a:	42a2      	cmp	r2, r4
 800493c:	d9fa      	bls.n	8004934 <_free_r+0x48>
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	1858      	adds	r0, r3, r1
 8004942:	42a0      	cmp	r0, r4
 8004944:	d10b      	bne.n	800495e <_free_r+0x72>
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	4401      	add	r1, r0
 800494a:	1858      	adds	r0, r3, r1
 800494c:	4282      	cmp	r2, r0
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	d1de      	bne.n	8004910 <_free_r+0x24>
 8004952:	6810      	ldr	r0, [r2, #0]
 8004954:	6852      	ldr	r2, [r2, #4]
 8004956:	4401      	add	r1, r0
 8004958:	6019      	str	r1, [r3, #0]
 800495a:	605a      	str	r2, [r3, #4]
 800495c:	e7d8      	b.n	8004910 <_free_r+0x24>
 800495e:	d902      	bls.n	8004966 <_free_r+0x7a>
 8004960:	230c      	movs	r3, #12
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	e7d4      	b.n	8004910 <_free_r+0x24>
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	1821      	adds	r1, r4, r0
 800496a:	428a      	cmp	r2, r1
 800496c:	bf01      	itttt	eq
 800496e:	6811      	ldreq	r1, [r2, #0]
 8004970:	6852      	ldreq	r2, [r2, #4]
 8004972:	1809      	addeq	r1, r1, r0
 8004974:	6021      	streq	r1, [r4, #0]
 8004976:	6062      	str	r2, [r4, #4]
 8004978:	605c      	str	r4, [r3, #4]
 800497a:	e7c9      	b.n	8004910 <_free_r+0x24>
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	bf00      	nop
 8004980:	20000194 	.word	0x20000194

08004984 <_malloc_r>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	1ccd      	adds	r5, r1, #3
 8004988:	f025 0503 	bic.w	r5, r5, #3
 800498c:	3508      	adds	r5, #8
 800498e:	2d0c      	cmp	r5, #12
 8004990:	bf38      	it	cc
 8004992:	250c      	movcc	r5, #12
 8004994:	2d00      	cmp	r5, #0
 8004996:	4606      	mov	r6, r0
 8004998:	db01      	blt.n	800499e <_malloc_r+0x1a>
 800499a:	42a9      	cmp	r1, r5
 800499c:	d903      	bls.n	80049a6 <_malloc_r+0x22>
 800499e:	230c      	movs	r3, #12
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	2000      	movs	r0, #0
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	f000 f935 	bl	8004c14 <__malloc_lock>
 80049aa:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <_malloc_r+0xac>)
 80049ac:	6814      	ldr	r4, [r2, #0]
 80049ae:	4621      	mov	r1, r4
 80049b0:	b991      	cbnz	r1, 80049d8 <_malloc_r+0x54>
 80049b2:	4c20      	ldr	r4, [pc, #128]	; (8004a34 <_malloc_r+0xb0>)
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	b91b      	cbnz	r3, 80049c0 <_malloc_r+0x3c>
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f83d 	bl	8004a38 <_sbrk_r>
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	4629      	mov	r1, r5
 80049c2:	4630      	mov	r0, r6
 80049c4:	f000 f838 	bl	8004a38 <_sbrk_r>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d124      	bne.n	8004a16 <_malloc_r+0x92>
 80049cc:	230c      	movs	r3, #12
 80049ce:	4630      	mov	r0, r6
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	f000 f920 	bl	8004c16 <__malloc_unlock>
 80049d6:	e7e4      	b.n	80049a2 <_malloc_r+0x1e>
 80049d8:	680b      	ldr	r3, [r1, #0]
 80049da:	1b5b      	subs	r3, r3, r5
 80049dc:	d418      	bmi.n	8004a10 <_malloc_r+0x8c>
 80049de:	2b0b      	cmp	r3, #11
 80049e0:	d90f      	bls.n	8004a02 <_malloc_r+0x7e>
 80049e2:	600b      	str	r3, [r1, #0]
 80049e4:	18cc      	adds	r4, r1, r3
 80049e6:	50cd      	str	r5, [r1, r3]
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f914 	bl	8004c16 <__malloc_unlock>
 80049ee:	f104 000b 	add.w	r0, r4, #11
 80049f2:	1d23      	adds	r3, r4, #4
 80049f4:	f020 0007 	bic.w	r0, r0, #7
 80049f8:	1ac3      	subs	r3, r0, r3
 80049fa:	d0d3      	beq.n	80049a4 <_malloc_r+0x20>
 80049fc:	425a      	negs	r2, r3
 80049fe:	50e2      	str	r2, [r4, r3]
 8004a00:	e7d0      	b.n	80049a4 <_malloc_r+0x20>
 8004a02:	684b      	ldr	r3, [r1, #4]
 8004a04:	428c      	cmp	r4, r1
 8004a06:	bf16      	itet	ne
 8004a08:	6063      	strne	r3, [r4, #4]
 8004a0a:	6013      	streq	r3, [r2, #0]
 8004a0c:	460c      	movne	r4, r1
 8004a0e:	e7eb      	b.n	80049e8 <_malloc_r+0x64>
 8004a10:	460c      	mov	r4, r1
 8004a12:	6849      	ldr	r1, [r1, #4]
 8004a14:	e7cc      	b.n	80049b0 <_malloc_r+0x2c>
 8004a16:	1cc4      	adds	r4, r0, #3
 8004a18:	f024 0403 	bic.w	r4, r4, #3
 8004a1c:	42a0      	cmp	r0, r4
 8004a1e:	d005      	beq.n	8004a2c <_malloc_r+0xa8>
 8004a20:	1a21      	subs	r1, r4, r0
 8004a22:	4630      	mov	r0, r6
 8004a24:	f000 f808 	bl	8004a38 <_sbrk_r>
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d0cf      	beq.n	80049cc <_malloc_r+0x48>
 8004a2c:	6025      	str	r5, [r4, #0]
 8004a2e:	e7db      	b.n	80049e8 <_malloc_r+0x64>
 8004a30:	20000194 	.word	0x20000194
 8004a34:	20000198 	.word	0x20000198

08004a38 <_sbrk_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4c05      	ldr	r4, [pc, #20]	; (8004a54 <_sbrk_r+0x1c>)
 8004a3e:	4605      	mov	r5, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	f7ff f8e2 	bl	8003c0c <_sbrk>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_sbrk_r+0x1a>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_sbrk_r+0x1a>
 8004a50:	602b      	str	r3, [r5, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000374 	.word	0x20000374

08004a58 <_raise_r>:
 8004a58:	291f      	cmp	r1, #31
 8004a5a:	b538      	push	{r3, r4, r5, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	460d      	mov	r5, r1
 8004a60:	d904      	bls.n	8004a6c <_raise_r+0x14>
 8004a62:	2316      	movs	r3, #22
 8004a64:	6003      	str	r3, [r0, #0]
 8004a66:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a6e:	b112      	cbz	r2, 8004a76 <_raise_r+0x1e>
 8004a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a74:	b94b      	cbnz	r3, 8004a8a <_raise_r+0x32>
 8004a76:	4620      	mov	r0, r4
 8004a78:	f000 f830 	bl	8004adc <_getpid_r>
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4620      	mov	r0, r4
 8004a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a86:	f000 b817 	b.w	8004ab8 <_kill_r>
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d00a      	beq.n	8004aa4 <_raise_r+0x4c>
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	d103      	bne.n	8004a9a <_raise_r+0x42>
 8004a92:	2316      	movs	r3, #22
 8004a94:	6003      	str	r3, [r0, #0]
 8004a96:	2001      	movs	r0, #1
 8004a98:	e7e7      	b.n	8004a6a <_raise_r+0x12>
 8004a9a:	2400      	movs	r4, #0
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004aa2:	4798      	blx	r3
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e7e0      	b.n	8004a6a <_raise_r+0x12>

08004aa8 <raise>:
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <raise+0xc>)
 8004aaa:	4601      	mov	r1, r0
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f7ff bfd3 	b.w	8004a58 <_raise_r>
 8004ab2:	bf00      	nop
 8004ab4:	20000098 	.word	0x20000098

08004ab8 <_kill_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	2300      	movs	r3, #0
 8004abc:	4c06      	ldr	r4, [pc, #24]	; (8004ad8 <_kill_r+0x20>)
 8004abe:	4605      	mov	r5, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	f7ff f81e 	bl	8003b06 <_kill>
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	d102      	bne.n	8004ad4 <_kill_r+0x1c>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	b103      	cbz	r3, 8004ad4 <_kill_r+0x1c>
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000374 	.word	0x20000374

08004adc <_getpid_r>:
 8004adc:	f7ff b80c 	b.w	8003af8 <_getpid>

08004ae0 <__sread>:
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae8:	f000 f896 	bl	8004c18 <_read_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	bfab      	itete	ge
 8004af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004af2:	89a3      	ldrhlt	r3, [r4, #12]
 8004af4:	181b      	addge	r3, r3, r0
 8004af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004afa:	bfac      	ite	ge
 8004afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004afe:	81a3      	strhlt	r3, [r4, #12]
 8004b00:	bd10      	pop	{r4, pc}

08004b02 <__swrite>:
 8004b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b06:	461f      	mov	r7, r3
 8004b08:	898b      	ldrh	r3, [r1, #12]
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	05db      	lsls	r3, r3, #23
 8004b0e:	460c      	mov	r4, r1
 8004b10:	4616      	mov	r6, r2
 8004b12:	d505      	bpl.n	8004b20 <__swrite+0x1e>
 8004b14:	2302      	movs	r3, #2
 8004b16:	2200      	movs	r2, #0
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	f000 f868 	bl	8004bf0 <_lseek_r>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	4632      	mov	r2, r6
 8004b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b28:	81a3      	strh	r3, [r4, #12]
 8004b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2e:	463b      	mov	r3, r7
 8004b30:	4628      	mov	r0, r5
 8004b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b36:	f000 b817 	b.w	8004b68 <_write_r>

08004b3a <__sseek>:
 8004b3a:	b510      	push	{r4, lr}
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b42:	f000 f855 	bl	8004bf0 <_lseek_r>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	bf15      	itete	ne
 8004b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b56:	81a3      	strheq	r3, [r4, #12]
 8004b58:	bf18      	it	ne
 8004b5a:	81a3      	strhne	r3, [r4, #12]
 8004b5c:	bd10      	pop	{r4, pc}

08004b5e <__sclose>:
 8004b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b62:	f000 b813 	b.w	8004b8c <_close_r>
	...

08004b68 <_write_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	2200      	movs	r2, #0
 8004b72:	4c05      	ldr	r4, [pc, #20]	; (8004b88 <_write_r+0x20>)
 8004b74:	6022      	str	r2, [r4, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fe fffc 	bl	8003b74 <_write>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_write_r+0x1e>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_write_r+0x1e>
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	20000374 	.word	0x20000374

08004b8c <_close_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4c05      	ldr	r4, [pc, #20]	; (8004ba8 <_close_r+0x1c>)
 8004b92:	4605      	mov	r5, r0
 8004b94:	4608      	mov	r0, r1
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	f7ff f808 	bl	8003bac <_close>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_close_r+0x1a>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_close_r+0x1a>
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	20000374 	.word	0x20000374

08004bac <_fstat_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4c06      	ldr	r4, [pc, #24]	; (8004bcc <_fstat_r+0x20>)
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	f7ff f802 	bl	8003bc2 <_fstat>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d102      	bne.n	8004bc8 <_fstat_r+0x1c>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	b103      	cbz	r3, 8004bc8 <_fstat_r+0x1c>
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000374 	.word	0x20000374

08004bd0 <_isatty_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4c05      	ldr	r4, [pc, #20]	; (8004bec <_isatty_r+0x1c>)
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	f7ff f800 	bl	8003be0 <_isatty>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_isatty_r+0x1a>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_isatty_r+0x1a>
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	20000374 	.word	0x20000374

08004bf0 <_lseek_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4c05      	ldr	r4, [pc, #20]	; (8004c10 <_lseek_r+0x20>)
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f7fe fff8 	bl	8003bf4 <_lseek>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_lseek_r+0x1e>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_lseek_r+0x1e>
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	20000374 	.word	0x20000374

08004c14 <__malloc_lock>:
 8004c14:	4770      	bx	lr

08004c16 <__malloc_unlock>:
 8004c16:	4770      	bx	lr

08004c18 <_read_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	2200      	movs	r2, #0
 8004c22:	4c05      	ldr	r4, [pc, #20]	; (8004c38 <_read_r+0x20>)
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fe ff87 	bl	8003b3a <_read>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_read_r+0x1e>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_read_r+0x1e>
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20000374 	.word	0x20000374

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
